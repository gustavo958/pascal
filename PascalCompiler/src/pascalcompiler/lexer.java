/* The following code was generated by JFlex 1.6.1 */

package pascalcompiler;
import java_cup.runtime.*;
import static pascalcompiler.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/juliomarin/NetBeansProjects/PascalCompiler/src/pascalcompiler/Lexer.Flex</tt>
 */
public class lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\7\1\7\1\6\22\0\1\36\4\0\1\43"+
    "\1\0\1\5\1\53\1\54\1\41\1\40\1\60\1\2\1\3\1\42"+
    "\4\1\1\33\1\1\1\32\3\1\1\44\1\55\1\46\1\45\1\47"+
    "\2\0\32\4\1\51\1\0\1\52\1\57\2\0\1\11\1\23\1\14"+
    "\1\15\1\24\1\35\1\31\1\26\1\16\1\4\1\56\1\20\1\30"+
    "\1\17\1\21\1\37\1\4\1\12\1\25\1\27\1\22\1\61\1\34"+
    "\1\50\1\13\1\4\12\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\22\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\4\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\4\1\0\1\25\1\26\1\0\1\27\10\4"+
    "\1\30\1\31\1\32\5\4\1\33\1\34\16\4\1\35"+
    "\15\4\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\4\1\45\1\4\1\46\1\4\1\47\11\4\1\50"+
    "\3\4\1\51\1\52\1\53\2\4\1\0\5\4\1\54"+
    "\3\4\1\55\1\56\1\57\6\4\1\60\7\4\1\61"+
    "\3\4\1\62\1\63\1\4\1\0\1\4\1\64\4\4"+
    "\1\65\3\4\1\66\6\4\1\0\2\4\1\67\3\4"+
    "\1\70\4\4\1\71\1\72\1\73\1\74\1\4\1\75"+
    "\1\76\2\4\1\77\4\4\1\100\1\0\5\4\1\101"+
    "\1\102\5\4\1\103\1\104\2\4\1\0\1\105\1\106"+
    "\1\4\1\107\6\4\1\110\1\111\4\4\1\0\1\112"+
    "\1\113\1\114\1\115\3\4\1\116\1\117\3\4\1\0"+
    "\4\4\1\120\3\4\1\121\2\4\1\0\3\4\1\122"+
    "\1\123\1\4\1\124\1\125\4\4\1\126\2\4\1\127"+
    "\1\130\1\131\1\132\1\4\1\133\1\4\1\134\1\135"+
    "\1\136\1\137\1\4\1\140\1\4\1\141\1\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\62"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\62\0\u04e2\0\62\0\62\0\u0514\0\62"+
    "\0\u0546\0\u0578\0\u05aa\0\62\0\62\0\u05dc\0\62\0\62"+
    "\0\62\0\62\0\u060e\0\u0640\0\u0672\0\62\0\u012c\0\u012c"+
    "\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802"+
    "\0\u0834\0\u0866\0\372\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960"+
    "\0\u0992\0\372\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe"+
    "\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\372\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac"+
    "\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\u0f0a\0\62\0\u0f3c"+
    "\0\u0640\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\372\0\u1194\0\u11c6\0\u11f8"+
    "\0\372\0\372\0\372\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\372\0\u13ba\0\u13ec\0\u141e\0\372"+
    "\0\372\0\372\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a"+
    "\0\372\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8"+
    "\0\372\0\u16da\0\u170c\0\u173e\0\372\0\372\0\u1770\0\u17a2"+
    "\0\u17d4\0\372\0\u1806\0\u1838\0\u186a\0\u189c\0\372\0\u18ce"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\372\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\372\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\372\0\372\0\372"+
    "\0\372\0\u1cb6\0\372\0\372\0\u1ce8\0\u1d1a\0\372\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\372\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u1f0e\0\372\0\372\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6"+
    "\0\u2008\0\372\0\372\0\u203a\0\u206c\0\u209e\0\372\0\372"+
    "\0\u20d0\0\372\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\372\0\372\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\372"+
    "\0\372\0\372\0\372\0\u2328\0\u235a\0\u238c\0\372\0\372"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\372\0\u254e\0\u2580\0\u25b2\0\372\0\u25e4\0\u2616\0\u2648"+
    "\0\u267a\0\u26ac\0\u26de\0\372\0\372\0\u2710\0\62\0\372"+
    "\0\u2742\0\u2774\0\u27a6\0\u27d8\0\372\0\u280a\0\u283c\0\372"+
    "\0\62\0\372\0\372\0\u286e\0\372\0\u28a0\0\372\0\372"+
    "\0\372\0\372\0\u28d2\0\372\0\u2904\0\372\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\0"+
    "\1\10\1\11\1\12\1\6\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\6\1\25"+
    "\1\26\1\27\2\3\1\30\1\31\1\10\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\6\1\51\1\52"+
    "\1\53\63\0\1\3\1\0\1\54\26\0\2\3\27\0"+
    "\1\55\30\0\2\55\31\0\1\56\57\0\1\6\2\0"+
    "\1\6\4\0\25\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\5\57\1\60\2\0\52\57\1\0"+
    "\1\6\2\0\1\6\4\0\1\6\1\61\4\6\1\62"+
    "\16\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\13\6\1\63"+
    "\11\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\64\6\6"+
    "\1\65\1\66\4\6\1\67\7\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\5\6\1\70\2\6\1\71\14\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\6\6\1\72\15\6\1\73"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\5\6\1\74\2\6"+
    "\1\75\2\6\1\76\11\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\1\77\7\6\1\100\14\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\6\1\101\22\6\1\102\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\6\6\1\103\16\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\6\1\104\1\105\5\6\1\106"+
    "\2\6\1\107\11\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\6\6\1\110\1\111\15\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\11\6\1\112\1\6\1\113\1\6\1\114\1\115"+
    "\1\116\5\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\1\6"+
    "\1\117\1\120\5\6\1\121\4\6\1\122\7\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\10\6\1\123\14\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\10\6\1\124\14\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\1\6\1\125\3\6\1\126"+
    "\2\6\1\127\4\6\1\130\7\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\131\4\6\1\132\2\6\1\133\1\134"+
    "\13\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\135\1\136"+
    "\23\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\54\0\1\137\52\0\1\140\61\0\1\141\1\142"+
    "\1\143\57\0\1\144\1\0\1\145\13\0\1\6\2\0"+
    "\1\6\4\0\10\6\1\146\14\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\41\0\1\147\21\0"+
    "\1\6\2\0\1\6\4\0\1\150\24\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\151"+
    "\30\0\2\151\27\0\1\55\1\0\1\54\26\0\2\55"+
    "\27\0\1\6\2\0\1\6\4\0\1\6\1\152\23\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\4\6\1\153\20\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\1\154\2\6\1\155"+
    "\12\6\1\156\6\6\1\0\1\157\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\160\12\6\1\161\10\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\162\24\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\6\6\1\163\16\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\1\164\24\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\25\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\165\1\0\1\6\2\0\1\6\4\0\11\6\1\166"+
    "\11\6\1\167\1\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\170\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\7\6\1\171\15\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\172\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\23\6\1\173\1\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\12\6\1\174\12\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\6\6\1\175\16\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\25\6\1\176\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\16\6\1\177"+
    "\6\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\13\6\1\200"+
    "\11\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\16\6\1\201"+
    "\6\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\10\6\1\202"+
    "\14\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\20\6\1\203"+
    "\4\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\4\6\1\204"+
    "\4\6\1\205\13\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\14\6\1\206\10\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\12\6\1\207\12\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\210\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\211\5\6\1\212\1\213\14\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\6\1\214\23\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\215\24\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\11\6\1\216\13\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\25\6\1\0\1\217\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\13\6\1\220\11\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\4\6\1\221\20\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\222\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\223\17\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\224\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\225\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\226\17\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\7\6\1\227\15\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\7\6\1\230\15\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\231\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\6\6\1\232\16\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\3\6\1\233\21\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\10\6\1\234\14\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\235\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\236\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\237\24\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\25\6"+
    "\1\240\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\4\6\1\241\2\6"+
    "\1\242\15\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\10\6"+
    "\1\243\14\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\11\6"+
    "\1\244\13\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\245\11\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\4\6"+
    "\1\246\20\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\247\11\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\14\6"+
    "\1\250\10\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\14\6"+
    "\1\251\1\6\1\252\6\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\1\6\1\253\23\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\12\6\1\254\12\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\6\6\1\255\16\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\13\6\1\256\5\6\1\257\3\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\260\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\20\6\1\261\4\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\24\0\1\262"+
    "\36\0\1\6\2\0\1\6\4\0\5\6\1\263\17\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\1\264\24\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\13\6\1\265\11\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\7\6\1\266\15\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\5\6\1\267\17\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\17\6\1\270\5\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\13\6\1\271\11\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\1\6\1\272\23\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\1\6\1\273\23\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\5\6\1\274\17\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\7\6\1\275\15\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\13\6\1\276\11\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\13\6\1\277\11\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\6\6\1\300\16\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\10\6\1\301\14\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\16\6\1\302\6\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\15\6\1\303\7\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\4\6\1\304\20\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\7\6\1\305\15\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\14\6\1\306\10\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\13\6\1\307\11\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\3\6\1\310\21\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\25\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\311\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\3\6\1\312\14\6\1\313\4\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\2\6\1\314\22\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\27\0"+
    "\1\315\33\0\1\6\2\0\1\6\4\0\7\6\1\316"+
    "\15\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\6\1\317"+
    "\23\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\6\1\320"+
    "\23\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\321\24\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\5\6\1\322\17\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\14\6\1\323\10\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\16\6\1\324\6\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\5\6\1\325\17\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\1\326\24\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\7\6\1\327\15\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\16\6\1\330\6\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\20\6\1\331\4\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\22\6\1\332\2\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\7\6\1\333\15\6\1\0"+
    "\1\6\10\0\1\6\5\0\1\6\2\0\1\6\1\0"+
    "\1\6\2\0\1\6\4\0\5\6\1\334\15\6\1\335"+
    "\1\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\20\0\1\336\42\0\1\6\2\0\1\6\4\0"+
    "\7\6\1\337\15\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\25\6\1\0\1\6\10\0\1\6\5\0\1\340\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\13\6\1\341"+
    "\11\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\6\6\1\342"+
    "\16\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\13\6\1\343"+
    "\11\6\1\0\1\6\10\0\1\6\5\0\1\6\2\0"+
    "\1\6\1\0\1\6\2\0\1\6\4\0\1\344\24\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\16\6\1\345\6\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\6\6\1\346\16\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\7\6\1\347\15\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\13\6\1\350\11\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\13\6\1\351\11\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\13\6\1\352\11\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\16\6\1\353\6\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\13\6\1\354\11\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\13\6\1\355\11\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\1\0\1\6\2\0\1\6\4\0\1\6\1\356\23\6"+
    "\1\0\1\6\10\0\1\6\5\0\1\6\2\0\1\6"+
    "\26\0\1\357\34\0\1\6\2\0\1\6\4\0\6\6"+
    "\1\360\16\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\4\6"+
    "\1\361\20\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\6\6"+
    "\1\362\16\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\16\6"+
    "\1\363\6\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\6\6"+
    "\1\364\16\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\6\6"+
    "\1\365\16\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\3\6"+
    "\1\366\21\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\367\11\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\10\6"+
    "\1\370\14\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\13\6"+
    "\1\371\11\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\6\6"+
    "\1\372\16\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\1\0\1\6\2\0\1\6\4\0\10\6"+
    "\1\373\14\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\25\0\1\374\35\0\1\6\2\0\1\6"+
    "\4\0\1\375\24\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\376\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\6\6\1\377\16\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\u0100\17\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\20\6\1\u0101\4\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\u0102\17\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\7\6\1\u0103\15\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\5\6\1\u0104\17\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\4\6\1\u0105\20\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\4\6\1\u0106\20\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\u0107\24\6\1\0\1\6\10\0\1\6\5\0\1\6"+
    "\2\0\1\6\24\0\1\u0108\36\0\1\6\2\0\1\6"+
    "\4\0\1\u0109\24\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\11\6\1\u010a\13\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\u010b\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\u010c\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\16\6\1\u010d\6\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\1\0\1\6\2\0\1\6\4\0"+
    "\1\6\1\u010e\23\6\1\0\1\6\10\0\1\6\5\0"+
    "\1\6\2\0\1\6\24\0\1\u010f\36\0\1\6\2\0"+
    "\1\6\4\0\6\6\1\u0110\16\6\1\0\1\6\10\0"+
    "\1\6\5\0\1\6\2\0\1\6\1\0\1\6\2\0"+
    "\1\6\4\0\1\u0111\24\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\20\6\1\u0112\4\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\6\6\1\u0113\16\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\6\6\1\u0114\16\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\6\6\1\u0115\16\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\10\6\1\u0116\14\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\11\6\1\u0117\13\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\1\0\1\6\2\0\1\6"+
    "\4\0\17\6\1\u0118\5\6\1\0\1\6\10\0\1\6"+
    "\5\0\1\6\2\0\1\6\17\0\1\u0119\43\0\1\6"+
    "\2\0\1\6\4\0\7\6\1\u011a\15\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\u011b\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\u011c\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\4\6\1\u011d\20\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\16\6\1\u011e\6\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\u011f\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\16\6\1\u0120\6\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\16\6\1\u0121\6\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\6\6\1\u0122\16\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\6\1\u0123\23\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\1\6\1\u0124\23\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\u0125\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\13\6\1\u0126\11\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6\1\0\1\6"+
    "\2\0\1\6\4\0\4\6\1\u0127\20\6\1\0\1\6"+
    "\10\0\1\6\5\0\1\6\2\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\22\1\1\11\1\1\2\11"+
    "\1\1\1\11\3\1\2\11\1\1\4\11\1\1\1\0"+
    "\1\1\1\11\1\0\57\1\7\11\1\1\1\11\26\1"+
    "\1\0\41\1\1\0\21\1\1\0\32\1\1\0\20\1"+
    "\1\0\20\1\1\0\14\1\1\0\13\1\1\0\6\1"+
    "\1\11\11\1\1\11\16\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[295];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Token.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(Token.PERROR, yycolumn, yyline, new String(yytext()));
            }
          case 99: break;
          case 2: 
            { return new Symbol(Token.PNUMERO, yycolumn, yyline, new String(yytext()));
            }
          case 100: break;
          case 3: 
            { return new Symbol(Token.PMENOS, yycolumn, yyline, new String(yytext()));
            }
          case 101: break;
          case 4: 
            { return new Symbol(Token.PID, yycolumn, yyline, new String(yytext()));
            }
          case 102: break;
          case 5: 
            { /*Ignore*/
            }
          case 103: break;
          case 6: 
            { return new Symbol(Token.PMAS, yycolumn, yyline, new String(yytext()));
            }
          case 104: break;
          case 7: 
            { return new Symbol(Token.PPOR, yycolumn, yyline, new String(yytext()));
            }
          case 105: break;
          case 8: 
            { return new Symbol(Token.PENTRE, yycolumn, yyline, new String(yytext()));
            }
          case 106: break;
          case 9: 
            { return new Symbol(Token.PMOD2, yycolumn, yyline, new String(yytext()));
            }
          case 107: break;
          case 10: 
            { return new Symbol(Token.PDOSPUNTOS, yycolumn, yyline, new String(yytext()));
            }
          case 108: break;
          case 11: 
            { return new Symbol(Token.PCOMPARE, yycolumn, yyline, new String(yytext()));
            }
          case 109: break;
          case 12: 
            { return new Symbol(Token.PMENOR, yycolumn, yyline, new String(yytext()));
            }
          case 110: break;
          case 13: 
            { return new Symbol(Token.PMAYOR, yycolumn, yyline, new String(yytext()));
            }
          case 111: break;
          case 14: 
            { return new Symbol(Token.PBRACKETA, yycolumn, yyline, new String(yytext()));
            }
          case 112: break;
          case 15: 
            { return new Symbol(Token.PBRACKETC, yycolumn, yyline, new String(yytext()));
            }
          case 113: break;
          case 16: 
            { return new Symbol(Token.PPARA, yycolumn, yyline, new String(yytext()));
            }
          case 114: break;
          case 17: 
            { return new Symbol(Token.PPARC, yycolumn, yyline, new String(yytext()));
            }
          case 115: break;
          case 18: 
            { return new Symbol(Token.PPUNTOCOMA, yycolumn, yyline, new String(yytext()));
            }
          case 116: break;
          case 19: 
            { return new Symbol(Token.PPOINTER, yycolumn, yyline, new String(yytext()));
            }
          case 117: break;
          case 20: 
            { return new Symbol(Token.PCOMA, yycolumn, yyline, new String(yytext()));
            }
          case 118: break;
          case 21: 
            { return new Symbol(Token.PENTERO, yycolumn, yyline, new String(yytext()));
            }
          case 119: break;
          case 22: 
            { return new Symbol(Token.PDESDEHASTA, yycolumn, yyline, new String(yytext()));
            }
          case 120: break;
          case 23: 
            { return new Symbol(Token.PTEXTO, yycolumn, yyline, new String(yytext()));
            }
          case 121: break;
          case 24: 
            { return new Symbol(Token.PDO, yycolumn, yyline, new String(yytext()));
            }
          case 122: break;
          case 25: 
            { return new Symbol(Token.PIN, yycolumn, yyline, new String(yytext()));
            }
          case 123: break;
          case 26: 
            { return new Symbol(Token.PIF, yycolumn, yyline, new String(yytext()));
            }
          case 124: break;
          case 27: 
            { return new Symbol(Token.POR, yycolumn, yyline, new String(yytext()));
            }
          case 125: break;
          case 28: 
            { return new Symbol(Token.POF, yycolumn, yyline, new String(yytext()));
            }
          case 126: break;
          case 29: 
            { return new Symbol(Token.PTO, yycolumn, yyline, new String(yytext()));
            }
          case 127: break;
          case 30: 
            { return new Symbol(Token.PCOMENTARIOC, yycolumn, yyline, new String(yytext()));
            }
          case 128: break;
          case 31: 
            { return new Symbol(Token.PASIG, yycolumn, yyline, new String(yytext()));
            }
          case 129: break;
          case 32: 
            { return new Symbol(Token.PMENORIGUAL, yycolumn, yyline, new String(yytext()));
            }
          case 130: break;
          case 33: 
            { return new Symbol(Token.PBITWISEL, yycolumn, yyline, new String(yytext()));
            }
          case 131: break;
          case 34: 
            { return new Symbol(Token.PDISTINTO, yycolumn, yyline, new String(yytext()));
            }
          case 132: break;
          case 35: 
            { return new Symbol(Token.PMAYORIGUAL, yycolumn, yyline, new String(yytext()));
            }
          case 133: break;
          case 36: 
            { return new Symbol(Token.PBITWISER, yycolumn, yyline, new String(yytext()));
            }
          case 134: break;
          case 37: 
            { return new Symbol(Token.PCOMENTARIOA, yycolumn, yyline, new String(yytext()));
            }
          case 135: break;
          case 38: 
            { return new Symbol(Token.PFLOTANTE, yycolumn, yyline, new String(yytext()));
            }
          case 136: break;
          case 39: 
            { return new Symbol(Token.PAND, yycolumn, yyline, new String(yytext()));
            }
          case 137: break;
          case 40: 
            { return new Symbol(Token.PDIV, yycolumn, yyline, new String(yytext()));
            }
          case 138: break;
          case 41: 
            { return new Symbol(Token.PNIL, yycolumn, yyline, new String(yytext()));
            }
          case 139: break;
          case 42: 
            { return new Symbol(Token.PNOT, yycolumn, yyline, new String(yytext()));
            }
          case 140: break;
          case 43: 
            { return new Symbol(Token.PNEW, yycolumn, yyline, new String(yytext()));
            }
          case 141: break;
          case 44: 
            { return new Symbol(Token.PEND, yycolumn, yyline, new String(yytext()));
            }
          case 142: break;
          case 45: 
            { return new Symbol(Token.PSET, yycolumn, yyline, new String(yytext()));
            }
          case 143: break;
          case 46: 
            { return new Symbol(Token.PSHR, yycolumn, yyline, new String(yytext()));
            }
          case 144: break;
          case 47: 
            { return new Symbol(Token.PSHL, yycolumn, yyline, new String(yytext()));
            }
          case 145: break;
          case 48: 
            { return new Symbol(Token.PMOD, yycolumn, yyline, new String(yytext()));
            }
          case 146: break;
          case 49: 
            { return new Symbol(Token.PFOR, yycolumn, yyline, new String(yytext()));
            }
          case 147: break;
          case 50: 
            { return new Symbol(Token.PXOR, yycolumn, yyline, new String(yytext()));
            }
          case 148: break;
          case 51: 
            { return new Symbol(Token.PVAR, yycolumn, yyline, new String(yytext()));
            }
          case 149: break;
          case 52: 
            { return new Symbol(Token.PREAL, yycolumn, yyline, new String(yytext()));
            }
          case 150: break;
          case 53: 
            { return new Symbol(Token.PCASE, yycolumn, yyline, new String(yytext()));
            }
          case 151: break;
          case 54: 
            { return new Symbol(Token.PCHAR, yycolumn, yyline, new String(yytext()));
            }
          case 152: break;
          case 55: 
            { return new Symbol(Token.PBYTE, yycolumn, yyline, new String(yytext()));
            }
          case 153: break;
          case 56: 
            { return new Symbol(Token.PELSE, yycolumn, yyline, new String(yytext()));
            }
          case 154: break;
          case 57: 
            { return new Symbol(Token.PTRUE, yycolumn, yyline, new String(yytext()));
            }
          case 155: break;
          case 58: 
            { return new Symbol(Token.PTYPE, yycolumn, yyline, new String(yytext()));
            }
          case 156: break;
          case 59: 
            { return new Symbol(Token.PTHEN, yycolumn, yyline, new String(yytext()));
            }
          case 157: break;
          case 60: 
            { return new Symbol(Token.PGOTO, yycolumn, yyline, new String(yytext()));
            }
          case 158: break;
          case 61: 
            { return new Symbol(Token.PWITH, yycolumn, yyline, new String(yytext()));
            }
          case 159: break;
          case 62: 
            { return new Symbol(Token.PWORD, yycolumn, yyline, new String(yytext()));
            }
          case 160: break;
          case 63: 
            { return new Symbol(Token.PFILE, yycolumn, yyline, new String(yytext()));
            }
          case 161: break;
          case 64: 
            { return new Symbol(Token.PARRAY, yycolumn, yyline, new String(yytext()));
            }
          case 162: break;
          case 65: 
            { return new Symbol(Token.PCLASS, yycolumn, yyline, new String(yytext()));
            }
          case 163: break;
          case 66: 
            { return new Symbol(Token.PCONST, yycolumn, yyline, new String(yytext()));
            }
          case 164: break;
          case 67: 
            { return new Symbol(Token.PINT64, yycolumn, yyline, new String(yytext()));
            }
          case 165: break;
          case 68: 
            { return new Symbol(Token.PLABEL, yycolumn, yyline, new String(yytext()));
            }
          case 166: break;
          case 69: 
            { return new Symbol(Token.PUNTIL, yycolumn, yyline, new String(yytext()));
            }
          case 167: break;
          case 70: 
            { return new Symbol(Token.PBREAK, yycolumn, yyline, new String(yytext()));
            }
          case 168: break;
          case 71: 
            { return new Symbol(Token.PBEGIN, yycolumn, yyline, new String(yytext()));
            }
          case 169: break;
          case 72: 
            { return new Symbol(Token.PWHILE, yycolumn, yyline, new String(yytext()));
            }
          case 170: break;
          case 73: 
            { return new Symbol(Token.PFALSE, yycolumn, yyline, new String(yytext()));
            }
          case 171: break;
          case 74: 
            { return new Symbol(Token.PREADLN, yycolumn, yyline, new String(yytext()));
            }
          case 172: break;
          case 75: 
            { return new Symbol(Token.PRECORD, yycolumn, yyline, new String(yytext()));
            }
          case 173: break;
          case 76: 
            { return new Symbol(Token.PRETURN, yycolumn, yyline, new String(yytext()));
            }
          case 174: break;
          case 77: 
            { return new Symbol(Token.PREPEAT, yycolumn, yyline, new String(yytext()));
            }
          case 175: break;
          case 78: 
            { return new Symbol(Token.PDOUBLE, yycolumn, yyline, new String(yytext()));
            }
          case 176: break;
          case 79: 
            { return new Symbol(Token.PDOWNTO, yycolumn, yyline, new String(yytext()));
            }
          case 177: break;
          case 80: 
            { return new Symbol(Token.PSTRING, yycolumn, yyline, new String(yytext()));
            }
          case 178: break;
          case 81: 
            { return new Symbol(Token.PPACKED, yycolumn, yyline, new String(yytext()));
            }
          case 179: break;
          case 82: 
            { return new Symbol(Token.PINTEGER, yycolumn, yyline, new String(yytext()));
            }
          case 180: break;
          case 83: 
            { return new Symbol(Token.PLONGINT, yycolumn, yyline, new String(yytext()));
            }
          case 181: break;
          case 84: 
            { return new Symbol(Token.PORELSE, yycolumn, yyline, new String(yytext()));
            }
          case 182: break;
          case 85: 
            { return new Symbol(Token.PBOOLEAN, yycolumn, yyline, new String(yytext()));
            }
          case 183: break;
          case 86: 
            { return new Symbol(Token.PWRITELN, yycolumn, yyline, new String(yytext()));
            }
          case 184: break;
          case 87: 
            { return new Symbol(Token.PPROGRAM, yycolumn, yyline, new String(yytext()));
            }
          case 185: break;
          case 88: 
            { return new Symbol(Token.PANDTHEN, yycolumn, yyline, new String(yytext()));
            }
          case 186: break;
          case 89: 
            { return new Symbol(Token.PCARDINAL, yycolumn, yyline, new String(yytext()));
            }
          case 187: break;
          case 90: 
            { return new Symbol(Token.PCONTINUE, yycolumn, yyline, new String(yytext()));
            }
          case 188: break;
          case 91: 
            { return new Symbol(Token.PLONGWORD, yycolumn, yyline, new String(yytext()));
            }
          case 189: break;
          case 92: 
            { return new Symbol(Token.PSUBRANGE, yycolumn, yyline, new String(yytext()));
            }
          case 190: break;
          case 93: 
            { return new Symbol(Token.PSHORTINT, yycolumn, yyline, new String(yytext()));
            }
          case 191: break;
          case 94: 
            { return new Symbol(Token.PSMALLINT, yycolumn, yyline, new String(yytext()));
            }
          case 192: break;
          case 95: 
            { return new Symbol(Token.PFUNCTION, yycolumn, yyline, new String(yytext()));
            }
          case 193: break;
          case 96: 
            { return new Symbol(Token.PCHARACTER, yycolumn, yyline, new String(yytext()));
            }
          case 194: break;
          case 97: 
            { return new Symbol(Token.PPROCEDURE, yycolumn, yyline, new String(yytext()));
            }
          case 195: break;
          case 98: 
            { return new Symbol(Token.PENUMERATED, yycolumn, yyline, new String(yytext()));
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
