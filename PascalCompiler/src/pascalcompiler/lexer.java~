/* The following code was generated by JFlex 1.6.1 */

   package pascalcompiler;
 import java_cup.runtime.*;
import static pascalcompiler.Token.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/Users/Alejandro/NetBeansProjects/PascalCompiler/src/pascalcompiler/Lexer.Flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\6\1\7\1\7\1\6\22\0\1\60\4\0\1\23"+
    "\1\0\1\5\1\27\1\30\1\16\1\15\1\31\1\2\1\3\1\17"+
    "\4\1\1\57\1\1\1\56\3\1\1\11\1\32\1\13\1\12\1\14"+
    "\2\0\32\4\1\25\1\0\1\26\1\24\2\0\1\44\1\46\1\33"+
    "\1\22\1\40\1\52\1\43\1\55\1\36\1\4\1\54\1\53\1\20"+
    "\1\34\1\21\1\41\1\4\1\42\1\47\1\35\1\37\1\50\1\51"+
    "\1\61\1\45\1\4\12\0\1\7\u1fa2\0\1\7\1\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\3\4\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\21\4"+
    "\1\0\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\4\1\36\1\37\1\40\1\4\1\41"+
    "\7\4\1\42\3\4\1\43\1\44\36\4\1\45\1\46"+
    "\1\0\2\4\1\47\5\4\1\50\1\51\1\52\5\4"+
    "\1\53\11\4\1\54\10\4\1\55\1\4\1\56\1\57"+
    "\1\60\4\4\1\61\5\4\1\62\1\0\5\4\1\63"+
    "\1\4\1\64\1\65\1\66\1\67\4\4\1\70\7\4"+
    "\1\71\1\72\1\0\4\4\1\73\4\4\1\74\1\75"+
    "\2\4\1\76\4\4\1\0\3\4\1\77\1\4\1\100"+
    "\2\4\1\101\1\102\10\4\1\0\1\103\1\4\1\104"+
    "\1\105\5\4\1\106\1\4\1\107\2\4\1\110\1\0"+
    "\1\111\1\112\7\4\1\113\1\114\1\115\1\116\1\117"+
    "\1\0\2\4\1\120\6\4\1\121\3\4\1\122\2\4"+
    "\1\123\1\0\1\124\3\4\1\125\1\4\1\126\1\4"+
    "\1\127\1\130\3\4\1\131\1\132\1\133\1\134\1\135"+
    "\1\136\1\137\1\4\1\140\1\141";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\62"+
    "\0\u015e\0\62\0\u0190\0\u01c2\0\62\0\u01f4\0\62\0\u0226"+
    "\0\u0258\0\u028a\0\62\0\62\0\62\0\62\0\u02bc\0\62"+
    "\0\62\0\62\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578"+
    "\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\62\0\62\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\u06a4\0\u06d6\0\372"+
    "\0\u0708\0\u073a\0\62\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\372\0\u08ca\0\u08fc\0\u092e\0\u0960\0\372"+
    "\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10"+
    "\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0640\0\372"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\372\0\u1004\0\u1036\0\u1068\0\u109a"+
    "\0\u10cc\0\372\0\372\0\372\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\372\0\u11f8\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2"+
    "\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482"+
    "\0\u14b4\0\u14e6\0\u1518\0\u154a\0\372\0\u157c\0\372\0\372"+
    "\0\372\0\u15ae\0\u15e0\0\u1612\0\u1644\0\372\0\u1676\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\372\0\u1770\0\u17a2\0\u17d4\0\u1806"+
    "\0\u1838\0\u186a\0\372\0\u189c\0\u18ce\0\372\0\372\0\372"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\372\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\372\0\372\0\u1b26\0\u1b58"+
    "\0\u1b8a\0\u1bbc\0\u1bee\0\372\0\u1c20\0\u1c52\0\u1c84\0\u1cb6"+
    "\0\372\0\372\0\u1ce8\0\u1d1a\0\372\0\u1d4c\0\u1d7e\0\u1db0"+
    "\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\372\0\u1edc\0\372"+
    "\0\u1f0e\0\u1f40\0\372\0\372\0\u1f72\0\u1fa4\0\u1fd6\0\u2008"+
    "\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102\0\372\0\u2134\0\372"+
    "\0\372\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\372\0\u2260"+
    "\0\372\0\u2292\0\u22c4\0\372\0\u22f6\0\372\0\372\0\u2328"+
    "\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\372\0\372"+
    "\0\372\0\372\0\372\0\u2486\0\u24b8\0\u24ea\0\372\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\62\0\u2648\0\u267a"+
    "\0\u26ac\0\372\0\u26de\0\u2710\0\372\0\u2742\0\372\0\u2774"+
    "\0\u27a6\0\u27d8\0\372\0\u280a\0\372\0\u283c\0\372\0\372"+
    "\0\u286e\0\u28a0\0\u28d2\0\62\0\372\0\372\0\372\0\372"+
    "\0\372\0\372\0\u2904\0\372\0\372";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\0"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\6\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\2\6\2\3\1\10\1\53"+
    "\63\0\1\3\1\0\1\54\52\0\2\3\3\0\1\55"+
    "\54\0\2\55\5\0\1\56\57\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\25\6\1\0\1\6\6\7\2\0"+
    "\52\7\12\0\1\57\61\0\1\60\1\61\1\62\57\0"+
    "\1\63\1\0\1\64\75\0\1\65\32\0\1\6\2\0"+
    "\1\6\13\0\1\6\1\66\1\6\10\0\25\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\7\6\1\67\7\6\1\70\5\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\1\6\1\71\1\6\10\0"+
    "\3\6\1\72\21\6\1\0\1\6\16\0\1\73\44\0"+
    "\1\6\2\0\1\6\13\0\1\6\1\74\1\6\10\0"+
    "\11\6\1\75\6\6\1\76\1\6\1\77\2\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\6\1\100"+
    "\1\6\10\0\3\6\1\101\1\6\1\102\17\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\6\1\103"+
    "\1\6\10\0\7\6\1\104\2\6\1\105\7\6\1\106"+
    "\2\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\1\6\1\107\15\6\1\110\5\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\1\6\1\111\23\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\1\6\1\112\16\6\1\113"+
    "\4\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\7\6\1\114\1\6\1\115\13\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\5\6\1\116\17\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\1\6\1\117\1\6\10\0\25\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\1\6\1\120\5\6\1\121\15\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\1\6\1\122\1\6\10\0"+
    "\5\6\1\123\1\6\1\124\2\6\1\125\12\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\126\2\6"+
    "\10\0\2\6\1\127\1\6\1\130\1\131\14\6\1\132"+
    "\2\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\11\6\1\133\13\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\1\6\1\134\1\6\10\0"+
    "\3\6\1\135\3\6\1\136\12\6\1\137\2\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\6\1\140"+
    "\1\6\10\0\3\6\1\141\1\142\4\6\1\143\13\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\1\6"+
    "\1\144\1\6\10\0\11\6\1\145\13\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\6\1\146\1\6"+
    "\10\0\25\6\1\0\1\6\1\0\1\147\54\0\2\147"+
    "\3\0\1\55\1\0\1\54\52\0\2\55\3\0\1\6"+
    "\2\0\1\6\13\0\2\6\1\150\10\0\25\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\25\6\1\151\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\4\6\1\152\11\6\1\153\6\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\15\6\1\154\7\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\1\6\1\155\23\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\7\6\1\156\4\6\1\157\10\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\11\6\1\160"+
    "\13\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\11\6\1\161\13\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\2\6\1\162"+
    "\22\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\20\6\1\163\4\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\16\6\1\164"+
    "\6\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\4\6\1\165\20\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\6\6\1\166"+
    "\16\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\5\6\1\167\17\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\2\6\1\170"+
    "\22\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\171\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\2\6\1\172\10\0\4\6"+
    "\1\173\20\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\14\6\1\174\10\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\6\1\175\1\6"+
    "\10\0\25\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\176\24\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\1\177\1\6"+
    "\1\200\3\6\1\201\2\6\1\202\13\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\2\6"+
    "\1\203\22\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\2\6\1\204\10\0\25\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\205"+
    "\15\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\1\6\1\206\1\6\10\0\25\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\10\6\1\207"+
    "\14\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\5\6\1\210\17\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\2\6\1\211"+
    "\22\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\11\6\1\212\13\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\213"+
    "\15\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\13\6\1\214\11\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\2\6\1\215"+
    "\22\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\1\6\1\216\1\6\10\0\7\6\1\217\10\6\1\220"+
    "\4\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\7\6\1\221\15\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\222"+
    "\15\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\223\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\3\6\1\224"+
    "\21\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\3\6\1\225\21\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\226"+
    "\15\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\20\6\1\227\4\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\1\6\1\230"+
    "\23\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\20\6\1\231\4\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\1\6\1\232"+
    "\23\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\13\6\1\233\11\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\234"+
    "\15\6\1\0\1\6\40\0\1\235\22\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\13\6\1\236\11\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\1\6\1\237\23\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\2\6\1\240\11\6\1\241"+
    "\10\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\2\6\1\242\10\0\25\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\5\6\1\243\17\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\14\6\1\244\10\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\7\6\1\245\15\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\5\6\1\246\17\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\5\6\1\247\17\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\1\6\1\250\23\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\5\6\1\251\15\6"+
    "\1\252\1\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\3\6\1\253\21\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\254\2\6\10\0"+
    "\25\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\5\6\1\255\17\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\1\256\7\6"+
    "\1\257\14\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\21\6\1\260\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\6\1\261\1\6"+
    "\10\0\25\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\4\6\1\262\20\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\5\6"+
    "\1\263\17\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\2\6\1\264\10\0\20\6\1\265\4\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\6\1\266"+
    "\1\6\10\0\25\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\25\6\1\267\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\11\6\1\270"+
    "\13\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\20\6\1\271\4\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\3\6\1\272"+
    "\21\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\11\6\1\273\13\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\5\6\1\274"+
    "\17\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\20\6\1\275\4\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\3\6\1\276"+
    "\21\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\7\6\1\277\15\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\7\6\1\300"+
    "\15\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\2\6\1\301\10\0\25\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\22\6\1\302\2\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\2\6\1\303\22\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\20\6\1\304\4\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\5\6\1\305\17\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\1\306\24\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\14\6\1\307\10\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\10\6\1\310\14\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\5\6\1\311\17\6\1\0\1\6\53\0\1\312\7\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\20\6\1\313"+
    "\4\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\314\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\3\6\1\315"+
    "\21\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\316\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\3\6\1\317"+
    "\21\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\14\6\1\320\10\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\11\6\1\321"+
    "\13\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\10\6\1\322\14\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\24\6\1\323"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\20\6\1\324\4\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\5\6\1\325\17\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\5\6\1\326\17\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\7\6\1\327\15\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\5\6\1\330\17\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\7\6\1\331\15\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\7\6\1\332\15\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\11\6\1\333\13\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\20\6\1\334\4\6\1\0\1\6\35\0\1\335"+
    "\25\0\1\6\2\0\1\6\13\0\3\6\10\0\12\6"+
    "\1\336\12\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\5\6\1\337\17\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\1\6"+
    "\1\340\23\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\21\6\1\341\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\20\6"+
    "\1\342\4\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\6\1\343\23\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\11\6"+
    "\1\344\13\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\2\6\1\345\22\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\5\6"+
    "\1\346\17\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\5\6\1\347\17\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\2\6"+
    "\1\350\22\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\5\6\1\351\17\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\3\6"+
    "\1\352\12\6\1\353\6\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\20\6\1\354\4\6"+
    "\1\0\1\6\47\0\1\355\13\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\5\6\1\356\17\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\6\1\357\1\6"+
    "\10\0\25\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\6\1\360\23\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\1\6"+
    "\1\361\23\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\362\24\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\5\6\1\363"+
    "\17\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\7\6\1\364\15\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\2\6\1\365\10\0\25\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\11\6\1\366\13\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\2\6\1\367\10\0\25\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\2\6\1\370"+
    "\10\0\25\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\6\1\371\23\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\2\6"+
    "\1\372\22\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\1\6\1\373\23\6\1\0\1\6"+
    "\55\0\1\374\5\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\11\6\1\375\13\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\3\6\1\376\21\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\10\6\1\377\14\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\1\6\1\u0100\23\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\3\6\1\u0101\21\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\20\6\1\u0102\4\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\3\6\1\u0103\21\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\1\6\1\u0104\23\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\1\6"+
    "\1\u0105\1\6\10\0\25\6\1\0\1\6\40\0\1\u0106"+
    "\22\0\1\6\2\0\1\6\13\0\3\6\10\0\4\6"+
    "\1\u0107\20\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\11\6\1\u0108\13\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\2\6"+
    "\1\u0109\22\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\7\6\1\u010a\15\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\3\6\10\0\11\6"+
    "\1\u010b\13\6\1\0\1\6\1\0\1\6\2\0\1\6"+
    "\13\0\3\6\10\0\4\6\1\u010c\20\6\1\0\1\6"+
    "\1\0\1\6\2\0\1\6\13\0\1\u010d\2\6\10\0"+
    "\25\6\1\0\1\6\40\0\1\u010e\22\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\1\6\1\u010f\23\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\1\6\1\u0110\23\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\10\6\1\u0111\14\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\1\6\1\u0112\23\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\1\6\1\u0113\23\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\1\6\1\u0114"+
    "\1\6\10\0\25\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\2\6\1\u0115\22\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\7\6\1\u0116\15\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\5\6\1\u0117\17\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\20\6\1\u0118\4\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\5\6\1\u0119\17\6\1\0"+
    "\1\6\1\0\1\6\2\0\1\6\13\0\3\6\10\0"+
    "\2\6\1\u011a\22\6\1\0\1\6\1\0\1\6\2\0"+
    "\1\6\13\0\3\6\10\0\7\6\1\u011b\15\6\1\0"+
    "\1\6\34\0\1\u011c\26\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\u011d\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\5\6\1\u011e"+
    "\17\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\3\6\10\0\2\6\1\u011f\22\6\1\0\1\6\1\0"+
    "\1\6\2\0\1\6\13\0\3\6\10\0\1\6\1\u0120"+
    "\23\6\1\0\1\6\1\0\1\6\2\0\1\6\13\0"+
    "\2\6\1\u0121\10\0\25\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\7\6\1\u0122\15\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\3\6"+
    "\10\0\5\6\1\u0123\17\6\1\0\1\6\1\0\1\6"+
    "\2\0\1\6\13\0\3\6\10\0\5\6\1\u0124\17\6"+
    "\1\0\1\6\1\0\1\6\2\0\1\6\13\0\2\6"+
    "\1\u0125\10\0\25\6\1\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10550];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\4\11\1\1\3\11\21\1\1\0"+
    "\1\1\10\11\5\1\1\11\55\1\1\0\63\1\1\0"+
    "\31\1\1\0\22\1\1\0\22\1\1\0\17\1\1\0"+
    "\16\1\1\0\11\1\1\11\7\1\1\0\15\1\1\11"+
    "\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public String lexeme;
public int linea;
public int columna;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("error"); return PERROR;
            }
          case 98: break;
          case 2: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PNUMERO;
            }
          case 99: break;
          case 3: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMENOS;
            }
          case 100: break;
          case 4: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PID;
            }
          case 101: break;
          case 5: 
            { /*Ignore*/
            }
          case 102: break;
          case 6: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDOSPUNTOS;
            }
          case 103: break;
          case 7: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCOMPARE;
            }
          case 104: break;
          case 8: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMENOR;
            }
          case 105: break;
          case 9: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMAYOR;
            }
          case 106: break;
          case 10: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMAS;
            }
          case 107: break;
          case 11: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPOR;
            }
          case 108: break;
          case 12: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PENTRE;
            }
          case 109: break;
          case 13: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMOD2;
            }
          case 110: break;
          case 14: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPOINTER;
            }
          case 111: break;
          case 15: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBRACKETA;
            }
          case 112: break;
          case 16: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBRACKETC;
            }
          case 113: break;
          case 17: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPARA;
            }
          case 114: break;
          case 18: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPARC;
            }
          case 115: break;
          case 19: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCOMA;
            }
          case 116: break;
          case 20: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPUNTOCOMA;
            }
          case 117: break;
          case 21: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PENTERO;
            }
          case 118: break;
          case 22: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDESDEHASTA;
            }
          case 119: break;
          case 23: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PASIG;
            }
          case 120: break;
          case 24: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMENORIGUAL;
            }
          case 121: break;
          case 25: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBITWISEL;
            }
          case 122: break;
          case 26: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDISTINTO;
            }
          case 123: break;
          case 27: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMAYORIGUAL;
            }
          case 124: break;
          case 28: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBITWISER;
            }
          case 125: break;
          case 29: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCOMENTARIOC;
            }
          case 126: break;
          case 30: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return POR;
            }
          case 127: break;
          case 31: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return POF;
            }
          case 128: break;
          case 32: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDO;
            }
          case 129: break;
          case 33: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCOMENTARIOA;
            }
          case 130: break;
          case 34: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PTO;
            }
          case 131: break;
          case 35: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PIN;
            }
          case 132: break;
          case 36: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PIF;
            }
          case 133: break;
          case 37: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PFLOTANTE;
            }
          case 134: break;
          case 38: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PMOD;
            }
          case 135: break;
          case 39: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDIV;
            }
          case 136: break;
          case 40: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PNOT;
            }
          case 137: break;
          case 41: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PNIL;
            }
          case 138: break;
          case 42: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PNEW;
            }
          case 139: break;
          case 43: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PEND;
            }
          case 140: break;
          case 44: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PAND;
            }
          case 141: break;
          case 45: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSET;
            }
          case 142: break;
          case 46: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSHR;
            }
          case 143: break;
          case 47: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSHL;
            }
          case 144: break;
          case 48: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PVAR;
            }
          case 145: break;
          case 49: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PFOR;
            }
          case 146: break;
          case 50: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PXOR;
            }
          case 147: break;
          case 51: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCASE;
            }
          case 148: break;
          case 52: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCHAR;
            }
          case 149: break;
          case 53: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PTRUE;
            }
          case 150: break;
          case 54: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PTYPE;
            }
          case 151: break;
          case 55: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PTHEN;
            }
          case 152: break;
          case 56: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PELSE;
            }
          case 153: break;
          case 57: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PREAL;
            }
          case 154: break;
          case 58: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PGOTO;
            }
          case 155: break;
          case 59: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBYTE;
            }
          case 156: break;
          case 60: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PWORD;
            }
          case 157: break;
          case 61: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PWITH;
            }
          case 158: break;
          case 62: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PFILE;
            }
          case 159: break;
          case 63: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCONST;
            }
          case 160: break;
          case 64: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCLASS;
            }
          case 161: break;
          case 65: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PINT64;
            }
          case 162: break;
          case 66: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PUNTIL;
            }
          case 163: break;
          case 67: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PARRAY;
            }
          case 164: break;
          case 68: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBEGIN;
            }
          case 165: break;
          case 69: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBREAK;
            }
          case 166: break;
          case 70: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PWHILE;
            }
          case 167: break;
          case 71: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PFALSE;
            }
          case 168: break;
          case 72: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PLABEL;
            }
          case 169: break;
          case 73: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDOUBLE;
            }
          case 170: break;
          case 74: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PDOWNTO;
            }
          case 171: break;
          case 75: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPACKED;
            }
          case 172: break;
          case 76: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PRECORD;
            }
          case 173: break;
          case 77: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PRETURN;
            }
          case 174: break;
          case 78: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PREPEAT;
            }
          case 175: break;
          case 79: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PREADLN;
            }
          case 176: break;
          case 80: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSTRING;
            }
          case 177: break;
          case 81: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PORELSE;
            }
          case 178: break;
          case 82: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PINTEGER;
            }
          case 179: break;
          case 83: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPROGRAM;
            }
          case 180: break;
          case 84: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PBOOLEAN;
            }
          case 181: break;
          case 85: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PWRITELN;
            }
          case 182: break;
          case 86: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PLONGINT;
            }
          case 183: break;
          case 87: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCONTINUE;
            }
          case 184: break;
          case 88: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCARDINAL;
            }
          case 185: break;
          case 89: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PANDTHEN;
            }
          case 186: break;
          case 90: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSMALLINT;
            }
          case 187: break;
          case 91: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSUBRANGE;
            }
          case 188: break;
          case 92: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PSHORTINT;
            }
          case 189: break;
          case 93: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PFUNCTION;
            }
          case 190: break;
          case 94: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PLONGWORD;
            }
          case 191: break;
          case 95: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PCHARACTER;
            }
          case 192: break;
          case 96: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PPROCEDURE;
            }
          case 193: break;
          case 97: 
            { lexeme = yytext();  linea = yyline; columna = yycolumn; return PENUMERATED;
            }
          case 194: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
