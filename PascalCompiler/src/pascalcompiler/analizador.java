
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 20 08:19:56 CST 2017
//----------------------------------------------------

package pascalcompiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 20 08:19:56 CST 2017
  */
public class analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public analizador() {super();}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\011\000\002\003\012\000\002\005\006\000\002\004\004" +
    "\000\002\004\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\007\007\000\002\007\011\000\002\033\010\000\002\033" +
    "\010\000\002\034\006\000\002\034\006\000\002\034\005" +
    "\000\002\034\005\000\002\035\005\000\002\010\003\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\003" +
    "\000\002\011\003\000\002\014\005\000\002\014\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\015\003" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\024\012\000\002\032\006" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\003\000\002\022\005\000\002\022\005\000\002" +
    "\025\005\000\002\023\003\000\002\023\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\026\005\000" +
    "\002\026\004\000\002\027\007\000\002\027\014\000\002" +
    "\027\007\000\002\027\006\000\002\027\013\000\002\027" +
    "\006\000\002\030\005\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\017\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\004\100\004\001\002\000\004\140\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\071\011\001\002\000" +
    "\006\101\013\126\012\001\002\000\004\140\261\001\002" +
    "\000\014\025\031\030\021\032\025\033\027\121\032\001" +
    "\002\000\006\101\016\126\015\001\002\000\004\140\261" +
    "\001\002\000\014\025\031\030\021\032\025\033\027\121" +
    "\032\001\002\000\020\025\ufff6\030\ufff6\032\ufff6\033\ufff6" +
    "\071\ufff6\102\ufff6\121\ufff6\001\002\000\020\025\ufffb\030" +
    "\ufffb\032\ufffb\033\ufffb\071\ufffb\102\ufffb\121\ufffb\001\002" +
    "\000\004\140\247\001\002\000\020\025\ufff9\030\ufff9\032" +
    "\ufff9\033\ufff9\071\ufff9\102\ufff9\121\ufff9\001\002\000\016" +
    "\025\031\030\021\032\025\033\027\102\245\121\032\001" +
    "\002\000\020\025\ufff8\030\ufff8\032\ufff8\033\ufff8\071\ufff8" +
    "\102\ufff8\121\ufff8\001\002\000\020\067\055\075\043\076" +
    "\037\140\036\141\054\143\050\144\047\001\002\000\020" +
    "\025\ufff7\030\ufff7\032\ufff7\033\ufff7\071\ufff7\102\ufff7\121" +
    "\ufff7\001\002\000\006\067\204\140\206\001\002\000\020" +
    "\025\ufffa\030\ufffa\032\ufffa\033\ufffa\071\ufffa\102\ufffa\121" +
    "\ufffa\001\002\000\020\067\055\075\043\076\037\140\036" +
    "\141\054\143\050\144\047\001\002\000\004\067\033\001" +
    "\002\000\004\144\034\001\002\000\004\070\035\001\002" +
    "\000\022\025\uff99\027\uff99\030\uff99\032\uff99\033\uff99\071" +
    "\uff99\102\uff99\121\uff99\001\002\000\032\043\073\044\074" +
    "\045\070\046\100\047\067\050\065\051\071\052\063\053" +
    "\075\054\064\055\066\056\072\001\002\000\024\026\uffd4" +
    "\031\uffd4\034\uffd4\041\uffd4\051\uffd4\052\uffd4\063\uffd4\064" +
    "\uffd4\070\uffd4\001\002\000\016\026\uffec\031\uffec\034\146" +
    "\041\144\063\147\064\145\001\002\000\006\026\uffeb\031" +
    "\uffeb\001\002\000\020\026\uffe2\031\uffe2\034\uffe2\041\uffe2" +
    "\063\uffe2\064\uffe2\070\uffe2\001\002\000\024\026\uffd5\031" +
    "\uffd5\034\uffd5\041\uffd5\051\uffd5\052\uffd5\063\uffd5\064\uffd5" +
    "\070\uffd5\001\002\000\032\043\073\044\074\045\070\046" +
    "\100\047\067\050\065\051\071\052\063\053\075\054\064" +
    "\055\066\056\072\001\002\000\004\026\174\001\002\000" +
    "\032\043\073\044\074\045\070\046\100\047\067\050\065" +
    "\051\071\052\063\053\075\054\064\055\066\056\072\001" +
    "\002\000\016\051\071\052\063\053\075\054\064\055\066" +
    "\056\072\001\002\000\050\026\uffb3\031\uffb3\037\uffb3\043" +
    "\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3" +
    "\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\066\uffb3\070" +
    "\uffb3\115\uffb3\117\uffb3\001\002\000\042\026\uffb7\031\uffb7" +
    "\037\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7" +
    "\070\uffb7\001\002\000\026\034\146\041\144\043\073\044" +
    "\074\045\070\046\100\047\067\050\065\063\147\064\145" +
    "\001\002\000\024\026\uffe1\031\uffe1\034\uffe1\041\uffe1\051" +
    "\161\052\160\063\uffe1\064\uffe1\070\uffe1\001\002\000\050" +
    "\026\uffb2\031\uffb2\037\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\066\uffb2\070\uffb2\115\uffb2\117\uffb2\001" +
    "\002\000\020\067\055\075\043\076\037\140\056\141\054" +
    "\143\050\144\047\001\002\000\034\043\073\044\074\045" +
    "\070\046\100\047\067\050\065\051\071\052\063\053\075" +
    "\054\064\055\066\056\072\070\131\001\002\000\014\034" +
    "\146\041\144\063\147\064\145\070\150\001\002\000\004" +
    "\070\142\001\002\000\034\043\073\044\074\045\070\046" +
    "\100\047\067\050\065\051\071\052\063\053\075\054\064" +
    "\055\066\056\072\070\132\001\002\000\034\043\073\044" +
    "\074\045\070\046\100\047\067\050\065\051\071\052\063" +
    "\053\075\054\064\055\066\056\072\070\076\001\002\000" +
    "\014\067\uffd2\140\uffd2\141\uffd2\143\uffd2\144\uffd2\001\002" +
    "\000\014\067\uffd0\140\uffd0\141\uffd0\143\uffd0\144\uffd0\001" +
    "\002\000\012\067\uffac\140\uffac\141\uffac\143\uffac\001\002" +
    "\000\014\067\uffcf\140\uffcf\141\uffcf\143\uffcf\144\uffcf\001" +
    "\002\000\012\067\uffad\140\uffad\141\uffad\143\uffad\001\002" +
    "\000\012\067\uffb0\140\uffb0\141\uffb0\143\uffb0\001\002\000" +
    "\014\067\uffd3\140\uffd3\141\uffd3\143\uffd3\144\uffd3\001\002" +
    "\000\014\067\uffce\140\uffce\141\uffce\143\uffce\144\uffce\001" +
    "\002\000\012\067\uffb1\140\uffb1\141\uffb1\143\uffb1\001\002" +
    "\000\012\067\uffaf\140\uffaf\141\uffaf\143\uffaf\001\002\000" +
    "\014\067\uffd1\140\uffd1\141\uffd1\143\uffd1\144\uffd1\001\002" +
    "\000\042\026\uffb6\031\uffb6\037\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\054\uffb6\055\uffb6\056\uffb6\070\uffb6\001\002\000\012\067" +
    "\103\140\136\141\054\143\050\001\002\000\012\067\uffae" +
    "\140\uffae\141\uffae\143\uffae\001\002\000\012\067\103\140" +
    "\106\141\054\143\050\001\002\000\024\026\uffde\031\uffde" +
    "\043\073\044\074\045\070\046\100\047\067\050\065\070" +
    "\uffde\001\002\000\012\067\103\140\130\141\054\143\050" +
    "\001\002\000\016\043\073\044\074\045\070\046\100\047" +
    "\067\050\065\001\002\000\024\026\uffdd\031\uffdd\043\073" +
    "\044\074\045\070\046\100\047\067\050\065\070\uffdd\001" +
    "\002\000\016\043\073\044\074\045\070\046\100\047\067" +
    "\050\065\001\002\000\012\067\103\140\113\141\054\143" +
    "\050\001\002\000\042\026\uffbc\031\uffbc\037\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\070\uffbc\001\002" +
    "\000\042\026\uffbf\031\uffbf\037\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\070\uffbf\001\002\000\042\026" +
    "\uffbe\031\uffbe\037\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\070\uffbe\001\002\000\042\026\uffbd\031\uffbd" +
    "\037\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\070\uffbd\001\002\000\012\067\103\140\120\141\054\143" +
    "\050\001\002\000\042\026\uffc0\031\uffc0\037\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\070\uffc0\001\002" +
    "\000\042\026\uffc3\031\uffc3\037\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\070\uffc3\001\002\000\042\026" +
    "\uffc2\031\uffc2\037\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\070\uffc2\001\002\000\042\026\uffc1\031\uffc1" +
    "\037\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1" +
    "\070\uffc1\001\002\000\012\067\103\140\125\141\054\143" +
    "\050\001\002\000\042\026\uffb8\031\uffb8\037\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052" +
    "\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\070\uffb8\001\002" +
    "\000\042\026\uffbb\031\uffbb\037\uffbb\043\uffbb\044\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\070\uffbb\001\002\000\042\026" +
    "\uffba\031\uffba\037\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\056\uffba\070\uffba\001\002\000\042\026\uffb9\031\uffb9" +
    "\037\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050" +
    "\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9" +
    "\070\uffb9\001\002\000\020\043\073\044\074\045\070\046" +
    "\100\047\067\050\065\070\076\001\002\000\020\043\073" +
    "\044\074\045\070\046\100\047\067\050\065\070\132\001" +
    "\002\000\020\043\073\044\074\045\070\046\100\047\067" +
    "\050\065\070\131\001\002\000\054\026\uffb4\031\uffb4\034" +
    "\uffb4\037\uffb4\041\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\063\uffb4\064\uffb4\070\uffb4\130\uffb4\001\002" +
    "\000\042\026\uffb5\031\uffb5\037\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\070\uffb5\001\002\000\042\026" +
    "\uffc4\031\uffc4\037\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055" +
    "\uffc4\056\uffc4\070\uffc4\001\002\000\042\026\uffc7\031\uffc7" +
    "\037\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\070\uffc7\001\002\000\042\026\uffc6\031\uffc6\037\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\070\uffc6\001" +
    "\002\000\042\026\uffc5\031\uffc5\037\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\070\uffc5\001\002\000\012" +
    "\067\103\140\106\141\054\143\050\001\002\000\024\026" +
    "\uffdc\031\uffdc\043\073\044\074\045\070\046\100\047\067" +
    "\050\065\070\uffdc\001\002\000\024\026\uffdb\031\uffdb\043" +
    "\073\044\074\045\070\046\100\047\067\050\065\070\uffdb" +
    "\001\002\000\020\026\uffdf\031\uffdf\034\uffdf\041\uffdf\063" +
    "\uffdf\064\uffdf\070\uffdf\001\002\000\012\067\152\075\043" +
    "\076\037\140\155\001\002\000\012\067\uffcb\075\uffcb\076" +
    "\uffcb\140\uffcb\001\002\000\012\067\uffcd\075\uffcd\076\uffcd" +
    "\140\uffcd\001\002\000\012\067\uffca\075\uffca\076\uffca\140" +
    "\uffca\001\002\000\012\067\uffcc\075\uffcc\076\uffcc\140\uffcc" +
    "\001\002\000\020\026\uffe0\031\uffe0\034\uffe0\041\uffe0\063" +
    "\uffe0\064\uffe0\070\uffe0\001\002\000\020\026\uffe7\031\uffe7" +
    "\034\uffe7\041\uffe7\063\uffe7\064\uffe7\070\uffe7\001\002\000" +
    "\020\067\055\075\043\076\037\140\056\141\054\143\050" +
    "\144\047\001\002\000\020\026\uffea\031\uffea\034\uffea\041" +
    "\uffea\063\uffea\064\uffea\070\uffea\001\002\000\020\026\uffe9" +
    "\031\uffe9\034\uffe9\041\uffe9\063\uffe9\064\uffe9\070\uffe9\001" +
    "\002\000\020\026\uffe8\031\uffe8\034\uffe8\041\uffe8\063\uffe8" +
    "\064\uffe8\070\uffe8\001\002\000\004\144\157\001\002\000" +
    "\010\026\uffd8\031\uffd8\070\uffd8\001\002\000\006\075\043" +
    "\076\037\001\002\000\006\075\043\076\037\001\002\000" +
    "\010\026\uffd6\031\uffd6\070\uffd6\001\002\000\010\026\uffd7" +
    "\031\uffd7\070\uffd7\001\002\000\012\067\152\075\043\076" +
    "\037\140\170\001\002\000\020\026\uffe3\031\uffe3\034\uffe3" +
    "\041\uffe3\063\uffe3\064\uffe3\070\uffe3\001\002\000\020\026" +
    "\uffe6\031\uffe6\034\uffe6\041\uffe6\063\uffe6\064\uffe6\070\uffe6" +
    "\001\002\000\020\026\uffe5\031\uffe5\034\uffe5\041\uffe5\063" +
    "\uffe5\064\uffe5\070\uffe5\001\002\000\020\026\uffe4\031\uffe4" +
    "\034\uffe4\041\uffe4\063\uffe4\064\uffe4\070\uffe4\001\002\000" +
    "\006\140\173\144\172\001\002\000\010\026\uffda\031\uffda" +
    "\070\uffda\001\002\000\010\026\uffd9\031\uffd9\070\uffd9\001" +
    "\002\000\014\025\031\030\021\032\025\033\027\121\032" +
    "\001\002\000\020\025\ufff6\027\201\030\ufff6\032\ufff6\033" +
    "\ufff6\071\ufff6\121\ufff6\001\002\000\016\025\031\030\021" +
    "\032\025\033\027\071\200\121\032\001\002\000\020\025" +
    "\ufffc\030\ufffc\032\ufffc\033\ufffc\071\ufffc\102\ufffc\121\ufffc" +
    "\001\002\000\020\025\ufff5\030\ufff5\032\ufff5\033\ufff5\071" +
    "\ufff5\102\ufff5\121\ufff5\001\002\000\014\025\031\030\021" +
    "\032\025\033\027\121\032\001\002\000\016\025\031\030" +
    "\021\032\025\033\027\071\203\121\032\001\002\000\020" +
    "\025\ufff4\030\ufff4\032\ufff4\033\ufff4\071\ufff4\102\ufff4\121" +
    "\ufff4\001\002\000\004\140\241\001\002\000\004\130\235" +
    "\001\002\000\004\130\207\001\002\000\006\141\054\143" +
    "\050\001\002\000\004\115\233\001\002\000\010\102\224" +
    "\141\054\143\050\001\002\000\006\115\214\117\213\001" +
    "\002\000\006\141\054\143\050\001\002\000\004\101\215" +
    "\001\002\000\014\025\031\030\021\032\025\033\027\121" +
    "\032\001\002\000\010\102\uffef\141\uffef\143\uffef\001\002" +
    "\000\016\025\031\030\021\032\025\033\027\102\220\121" +
    "\032\001\002\000\004\071\221\001\002\000\024\025\ufffd" +
    "\030\ufffd\032\ufffd\033\ufffd\071\ufffd\102\ufffd\121\ufffd\141" +
    "\ufffd\143\ufffd\001\002\000\006\066\uffed\115\uffed\001\002" +
    "\000\004\115\231\001\002\000\004\071\230\001\002\000" +
    "\006\115\226\117\213\001\002\000\004\101\215\001\002" +
    "\000\010\102\ufff1\141\ufff1\143\ufff1\001\002\000\020\025" +
    "\ufff2\030\ufff2\032\ufff2\033\ufff2\071\ufff2\102\ufff2\121\ufff2" +
    "\001\002\000\004\101\215\001\002\000\010\102\ufff0\141" +
    "\ufff0\143\ufff0\001\002\000\004\101\215\001\002\000\010" +
    "\102\uffee\141\uffee\143\uffee\001\002\000\006\141\054\143" +
    "\050\001\002\000\010\102\237\141\054\143\050\001\002" +
    "\000\004\071\240\001\002\000\020\025\ufff3\030\ufff3\032" +
    "\ufff3\033\ufff3\071\ufff3\102\ufff3\121\ufff3\001\002\000\004" +
    "\070\131\001\002\000\004\031\243\001\002\000\004\101" +
    "\215\001\002\000\020\025\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\071\uffc8\102\uffc8\121\uffc8\001\002\000\004\072\246\001" +
    "\002\000\004\002\ufffe\001\002\000\004\042\250\001\002" +
    "\000\012\067\103\140\106\141\054\143\050\001\002\000" +
    "\020\037\253\043\073\044\074\045\070\046\100\047\067" +
    "\050\065\001\002\000\016\043\073\044\074\045\070\046" +
    "\100\047\067\050\065\001\002\000\012\067\103\140\106" +
    "\141\054\143\050\001\002\000\020\031\255\043\073\044" +
    "\074\045\070\046\100\047\067\050\065\001\002\000\004" +
    "\101\215\001\002\000\020\025\uffc9\030\uffc9\032\uffc9\033" +
    "\uffc9\071\uffc9\102\uffc9\121\uffc9\001\002\000\006\115\330" +
    "\120\324\001\002\000\010\101\uffab\126\uffab\140\310\001" +
    "\002\000\006\115\262\120\263\001\002\000\024\004\273" +
    "\007\274\010\275\011\271\017\267\021\272\022\276\023" +
    "\270\024\265\001\002\000\004\140\264\001\002\000\006" +
    "\115\uffa2\120\uffa2\001\002\000\004\071\uff9f\001\002\000" +
    "\004\071\306\001\002\000\004\071\uff9a\001\002\000\004" +
    "\071\uffa1\001\002\000\004\071\uff9b\001\002\000\004\071" +
    "\uff9c\001\002\000\004\065\277\001\002\000\004\071\uff9d" +
    "\001\002\000\004\071\uff9e\001\002\000\004\071\uffa0\001" +
    "\002\000\006\141\054\143\050\001\002\000\004\066\302" +
    "\001\002\000\004\117\213\001\002\000\004\130\303\001" +
    "\002\000\022\007\274\010\275\011\271\017\267\021\272" +
    "\022\276\023\270\024\265\001\002\000\004\071\305\001" +
    "\002\000\010\101\uffa5\126\uffa5\140\uffa5\001\002\000\010" +
    "\101\uffa6\126\uffa6\140\uffa6\001\002\000\006\115\323\120" +
    "\324\001\002\000\006\115\311\120\263\001\002\000\024" +
    "\004\313\007\274\010\275\011\271\017\267\021\272\022" +
    "\276\023\270\024\265\001\002\000\004\071\322\001\002" +
    "\000\004\065\314\001\002\000\006\141\054\143\050\001" +
    "\002\000\004\066\316\001\002\000\004\130\317\001\002" +
    "\000\022\007\274\010\275\011\271\017\267\021\272\022" +
    "\276\023\270\024\265\001\002\000\004\071\321\001\002" +
    "\000\010\101\uffa8\126\uffa8\140\uffa8\001\002\000\010\101" +
    "\uffa9\126\uffa9\140\uffa9\001\002\000\022\007\274\010\275" +
    "\011\271\017\267\021\272\022\276\023\270\024\265\001" +
    "\002\000\004\140\325\001\002\000\006\115\uffa3\120\uffa3" +
    "\001\002\000\004\071\327\001\002\000\010\101\uffa7\126" +
    "\uffa7\140\uffa7\001\002\000\022\007\274\010\275\011\271" +
    "\017\267\021\272\022\276\023\270\024\265\001\002\000" +
    "\004\071\332\001\002\000\010\101\uffa4\126\uffa4\140\uffa4" +
    "\001\002\000\016\025\031\030\021\032\025\033\027\102" +
    "\334\121\032\001\002\000\004\072\335\001\002\000\004" +
    "\002\uffff\001\002\000\010\101\uffaa\126\uffaa\140\310\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\334\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\013\001\001\000\006\027" +
    "\335\030\256\001\001\000\020\004\332\006\017\007\027" +
    "\017\016\024\021\032\023\033\025\001\001\000\002\001" +
    "\001\000\006\027\257\030\256\001\001\000\020\004\022" +
    "\006\017\007\027\017\016\024\021\032\023\033\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\176\007\027\017\016\024" +
    "\021\032\023\033\025\001\001\000\002\001\001\000\024" +
    "\010\241\011\037\012\040\014\041\015\052\020\045\022" +
    "\050\023\043\025\051\001\001\000\002\001\001\000\004" +
    "\025\204\001\001\000\002\001\001\000\024\010\044\011" +
    "\037\012\040\014\041\015\052\020\045\022\050\023\043" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\155\021\106" +
    "\001\001\000\002\001\001\000\004\013\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\136\021\113\001\001\000\002\001\001\000\006\016" +
    "\100\021\076\001\001\000\004\016\170\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\163\021\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\011\056" +
    "\012\057\014\041\015\052\020\061\022\050\023\060\025" +
    "\051\001\001\000\006\016\155\021\106\001\001\000\004" +
    "\013\142\001\001\000\002\001\001\000\006\016\136\021" +
    "\113\001\001\000\006\016\100\021\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\022\133\023\134" +
    "\025\132\001\001\000\002\001\001\000\012\020\101\022" +
    "\050\023\104\025\103\001\001\000\004\021\076\001\001" +
    "\000\012\020\125\022\050\023\126\025\103\001\001\000" +
    "\004\021\120\001\001\000\004\021\113\001\001\000\004" +
    "\021\106\001\001\000\010\022\110\023\111\025\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\115\023\116\025\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\122\023\123\025\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\076\001\001\000\004\021" +
    "\113\001\001\000\004\021\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\137\022\050" +
    "\023\140\025\103\001\001\000\004\021\076\001\001\000" +
    "\004\021\113\001\001\000\002\001\001\000\010\014\152" +
    "\015\153\025\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\056\012\057\014\041\015" +
    "\052\020\045\022\050\023\043\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\162\001\001\000\004" +
    "\015\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\165\015\166\025\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\175\006\017\007\027\017\174\024\021\032\023\033" +
    "\025\001\001\000\002\001\001\000\016\006\176\007\027" +
    "\017\016\024\021\032\023\033\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\201\006\017\007\027" +
    "\017\016\024\021\032\023\033\025\001\001\000\016\006" +
    "\176\007\027\017\016\024\021\032\023\033\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\211\034\210\035\207\001\001" +
    "\000\002\001\001\000\006\023\224\035\222\001\001\000" +
    "\002\001\001\000\004\023\221\001\001\000\004\005\215" +
    "\001\001\000\020\004\216\006\017\007\027\017\016\024" +
    "\021\032\023\033\025\001\001\000\002\001\001\000\016" +
    "\006\176\007\027\017\016\024\021\032\023\033\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\231\001\001\000\002\001\001\000\004\005" +
    "\233\001\001\000\002\001\001\000\010\023\211\034\235" +
    "\035\207\001\001\000\006\023\224\035\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\250\022\050\023\251\025\103\001\001\000\004\021" +
    "\076\001\001\000\004\021\113\001\001\000\012\020\253" +
    "\022\050\023\251\025\103\001\001\000\004\021\076\001" +
    "\001\000\004\005\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\306\001\001\000\002\001\001\000" +
    "\004\031\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\300\035\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\311\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\300" +
    "\035\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\325\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\330\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\006\176\007\027\017\016\024\021\032\023" +
    "\033\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\306\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public node elPadre;
    public boolean errorSintaxis = false;
    public void syntax_error(Symbol s) {
        errorSintaxis = true;
        System.out.print(" Error sintáctico en la línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido. " );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errorSintaxis = false;
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido. ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$analizador$actions {
  private final analizador parser;

  /** Constructor */
  CUP$analizador$actions(analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$analizador$do_action(
    int                        CUP$analizador$act_num,
    java_cup.runtime.lr_parser CUP$analizador$parser,
    java.util.Stack            CUP$analizador$stack,
    int                        CUP$analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador$result;

      /* select the action based on the action number */
      switch (CUP$analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // N_IMPRIMIR ::= PWRITELN PPARA PTEXTO PPARC 
            {
              String RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String wr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int prright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(wr+" - "+pa+" - "+pt+" - "+pr+" - "); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_IMPRIMIR",13, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_TIPOS ::= PREAL 
            {
              String RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String rl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(rl); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_TIPOS ::= PLONGINT 
            {
              String RESULT =null;
		int linleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int linright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String lin = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(lin); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_TIPOS ::= PSTRING 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(str); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_TIPOS ::= PSHORTINT 
            {
              String RESULT =null;
		int shileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int shiright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String shi = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(shi); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_TIPOS ::= PSMALLINT 
            {
              String RESULT =null;
		int smileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int smiright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String smi = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(smi); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N_TIPOS ::= PCHAR 
            {
              String RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String cr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(cr); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // N_TIPOS ::= PBOOLEAN 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(bl); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // N_TIPOS ::= PINTEGER 
            {
              String RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ent); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_TIPOS",23, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // N_COMAID ::= PID PCOMA PID 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - "+cm+" - "+idb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_COMAID",22, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // N_COMAID ::= N_COMAID PCOMA PID 
            {
              String RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ci = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("COMAID - "+cm+" - "+ida); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_COMAID",22, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // N_SINVARDECLARACION ::= N_COMAID PDOSPUNTOS N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int cmleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("COMAID - "+dp+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // N_SINVARDECLARACION ::= PID PDOSPUNTOS PARRAY PBRACKETA N_PROGRENUMERICO PBRACKETC POF N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-8)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-8)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-7)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ba = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pnuleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pnuright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pnu = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pofleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pof = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - "+dp+" - "+arr+" - "+ba+" - PROGRENUMERICO - "+bc+" - "+pof+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-8)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_SINVARDECLARACION ::= PID PDOSPUNTOS N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - "+dp+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_SINVARDECLARACION ::= N_SINVARDECLARACION N_COMAID PDOSPUNTOS N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int svdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int svdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String svd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SINVARDECLARACION - COMAID - "+dp+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_SINVARDECLARACION ::= N_SINVARDECLARACION PID PDOSPUNTOS PARRAY PBRACKETA N_PROGRENUMERICO PBRACKETC POF N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int svdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-9)).left;
		int svdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-9)).right;
		String svd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-9)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-8)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-8)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-8)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-7)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int baleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int baright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ba = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pnuleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pnuright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pnu = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int bcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int bcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String bc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pofleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pofright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pof = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SINVARDECLARACION - "+ida+" - "+dp+" - "+arr+" - "+ba+" - PROGRENUMERICO - "+bc+" - "+pof+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-9)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_SINVARDECLARACION ::= N_SINVARDECLARACION PID PDOSPUNTOS N_TIPOS PPUNTOCOMA 
            {
              String RESULT =null;
		int svdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int svdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String svd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SINVARDECLARACION - "+ida+" - "+dp+" - TIPOS - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SINVARDECLARACION",21, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N_VARDECLARACION ::= PVAR N_SINVARDECLARACION 
            {
              String RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int svdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int svdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String svd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(var+" - SINVARDECLARACION"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VARDECLARACION",20, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // N_VARDECLARACION ::= N_VARDECLARACION PVAR N_SINVARDECLARACION 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int svdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int svdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String svd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("VARDECLARACION - "+var+" - SINVARDECLARACION"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VARDECLARACION",20, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // N_OPERADORES ::= PMOD2 
            {
              String RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(mod); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // N_OPERADORES ::= PMOD 
            {
              String RESULT =null;
		int modleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int modright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String mod = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(mod); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // N_OPERADORES ::= PENTRE 
            {
              String RESULT =null;
		int entreleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int entreright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String entre = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(entre); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // N_OPERADORES ::= PMENOS 
            {
              String RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(menos); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // N_OPERADORES ::= PPOR 
            {
              String RESULT =null;
		int porleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int porright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(por); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_OPERADORES ::= PMAS 
            {
              String RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(mas); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORES",15, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_NUMERICOS ::= PNUMERO 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(numa); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_NUMERICOS",17, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_NUMERICOS ::= PFLOTANTE 
            {
              String RESULT =null;
		int flaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int flaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String fla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(fla); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_NUMERICOS",17, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N_IDCAPSULA ::= PPARA PID PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pder+" - "+ida+" - "+pizq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_IDCAPSULA",19, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // N_ARITMETICOCAPSULA ::= PPARA N_NUMERICOS PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pder+" - NUMERICOS - "+pizq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICOCAPSULA",16, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // N_ARITMETICOCAPSULA ::= PPARA N_ARITMETICO PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pder+" - ARITMETICO - "+pizq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICOCAPSULA",16, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // N_ARITMETICO ::= N_ARITMETICOCAPSULA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICOCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // N_ARITMETICO ::= N_IDCAPSULA N_OPERADORES N_IDCAPSULA 
            {
              String RESULT =null;
		int capaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int caparight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String capa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORES - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // N_ARITMETICO ::= N_IDCAPSULA N_OPERADORES PID 
            {
              String RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORES - "+idb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // N_ARITMETICO ::= N_IDCAPSULA N_OPERADORES N_NUMERICOS 
            {
              String RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORES - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // N_ARITMETICO ::= N_IDCAPSULA N_OPERADORES N_ARITMETICOCAPSULA 
            {
              String RESULT =null;
		int capleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORES - ARITMETICOCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // N_ARITMETICO ::= PID N_OPERADORES N_IDCAPSULA 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - OPERADORES - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // N_ARITMETICO ::= PID N_OPERADORES PID 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - OPERADORES - "+idb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // N_ARITMETICO ::= PID N_OPERADORES N_NUMERICOS 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - OPERADORES - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // N_ARITMETICO ::= PID N_OPERADORES N_ARITMETICOCAPSULA 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - OPERADORES - ARITMETICOCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // N_ARITMETICO ::= N_NUMERICOS N_OPERADORES N_IDCAPSULA 
            {
              String RESULT =null;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - OPERADORES - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // N_ARITMETICO ::= N_NUMERICOS N_OPERADORES PID 
            {
              String RESULT =null;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - OPERADORES - "+ida); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // N_ARITMETICO ::= N_NUMERICOS N_OPERADORES N_NUMERICOS 
            {
              String RESULT =null;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int nubleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int nubright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String nub = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - OPERADORES - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // N_ARITMETICO ::= N_NUMERICOS N_OPERADORES N_ARITMETICOCAPSULA 
            {
              String RESULT =null;
		int nualeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int nuaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String nua = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - OPERADORES - ARITMETICOCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // N_ARITMETICO ::= N_ARITMETICO N_OPERADORES N_IDCAPSULA 
            {
              String RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - OPERADORES - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // N_ARITMETICO ::= N_ARITMETICO N_OPERADORES PID 
            {
              String RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - OPERADORES - "+ida); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // N_ARITMETICO ::= N_ARITMETICO N_OPERADORES N_NUMERICOS 
            {
              String RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int nuleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int nuright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String nu = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - OPERADORES - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // N_ARITMETICO ::= N_ARITMETICO N_OPERADORES N_ARITMETICOCAPSULA 
            {
              String RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ar = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - OPERADORES - ARITMETICOCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_ARITMETICO",14, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // N_SUBWHILE ::= PWHILE N_EXPRESIONPADRE PDO N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int pdoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int pdoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pdo = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int beblleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int beblright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bebl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(wh+" - EXPRESIONPADRE - "+pdo+" - BEGINENDBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBWHILE",24, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // N_SUBFOR ::= PFOR PID PASIG N_ARITMETICO PTO N_ARITMETICO PDO N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int pfleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).right;
		String pf = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-7)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int asileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int asiright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String asi = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int arialeft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int ariaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String aria = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int ptoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int ptoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pto = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int aribleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int aribright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String arib = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int pdoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int pdoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pdo = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int beblleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int beblright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bebl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pf+" - "+ida+" - "+asi+" - ARITMETICO - "+pto+" - ARITMETICO - "+pdo+" - BEGINENDBLOQUE - "); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBFOR",18, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // N_OPERADORLOGICO ::= PORELSE 
            {
              String RESULT =null;
		int pelleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pelright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pel = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pel); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // N_OPERADORLOGICO ::= PANDTHEN 
            {
              String RESULT =null;
		int patleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int patright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pat = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pat); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // N_OPERADORLOGICO ::= POR 
            {
              String RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(po); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // N_OPERADORLOGICO ::= PAND 
            {
              String RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pa); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // N_SIMBOLOCOMPARE ::= PMAYORIGUAL 
            {
              String RESULT =null;
		int maxeleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int maxeright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String maxe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(maxe); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // N_SIMBOLOCOMPARE ::= PMENORIGUAL 
            {
              String RESULT =null;
		int mineleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int mineright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String mine = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(mine); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // N_SIMBOLOCOMPARE ::= PMAYOR 
            {
              String RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(max); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // N_SIMBOLOCOMPARE ::= PMENOR 
            {
              String RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(min); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // N_SIMBOLOCOMPARE ::= PCOMPARE 
            {
              String RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(eq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // N_SIMBOLOCOMPARE ::= PDISTINTO 
            {
              String RESULT =null;
		int disleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(dis); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // N_VALORESBOOLEANOS ::= PFALSE 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(fl); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VALORESBOOLEANOS",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // N_VALORESBOOLEANOS ::= PTRUE 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(tr); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VALORESBOOLEANOS",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_EXPRESIONCOMPARA ::= N_VALORESBOOLEANOS PDISTINTO N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int disright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("VALORESBOOLEANOS - "+dis+" - VALORESBOOLEANOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_EXPRESIONCOMPARA ::= N_VALORESBOOLEANOS PCOMPARE N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("VALORESBOOLEANOS - "+eq+" - VALORESBOOLEANOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_EXPRESIONCOMPARA ::= PID N_SIMBOLOCOMPARE PTEXTO 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int txbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int txbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String txb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ida+" - SIMBOLOCOMPARE - "+txb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_EXPRESIONCOMPARA ::= PTEXTO N_SIMBOLOCOMPARE PID 
            {
              String RESULT =null;
		int txaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int txaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String txa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(txa+" - SIMBOLOCOMPARE - "+idb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_EXPRESIONCOMPARA ::= PTEXTO N_SIMBOLOCOMPARE PTEXTO 
            {
              String RESULT =null;
		int txaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int txaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String txa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int txbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int txbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String txb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(txa+" - SIMBOLOCOMPARE - "+txb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_EXPRESIONCOMPARA ::= N_NUMERICOS N_SIMBOLOCOMPARE N_NUMERICOS 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - SIMBOLOCOMPARE - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_EXPRESIONCOMPARA ::= N_NUMERICOS N_SIMBOLOCOMPARE N_ARITMETICO 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int arbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int arbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String arb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - SIMBOLOCOMPARE - ARITMETICO"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_EXPRESIONCOMPARA ::= N_ARITMETICO N_SIMBOLOCOMPARE N_NUMERICOS 
            {
              String RESULT =null;
		int araleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int araright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ara = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - SIMBOLOCOMPARE - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_EXPRESIONCOMPARA ::= N_ARITMETICO N_SIMBOLOCOMPARE N_ARITMETICO 
            {
              String RESULT =null;
		int araleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int araright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ara = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int arbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int arbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String arb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("ARITMETICO - SIMBOLOCOMPARE - ARITMETICO"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_EXPRESIONCAPSULA ::= PPARA N_EXPRESIONCOMPARA PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int ecoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int ecoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String eco = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pder+" - EXPRESIONCOMPARA - "+pizq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCAPSULA",10, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_EXPRESIONCAPSULA ::= PPARA N_EXPRESIONCENTRAL PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pder+" - EXPRESIONCENTRAL - "+pizq); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCAPSULA",10, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_EXPRESIONCENTRAL ::= N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int vbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String vb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("VALORESBOOLEANOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCAPSULA 
            {
              String RESULT =null;
		int ecaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_EXPRESIONCENTRAL ::= N_IDCAPSULA N_OPERADORLOGICO N_IDCAPSULA 
            {
              String RESULT =null;
		int capaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int caparight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String capa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORLOGICO - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_EXPRESIONCENTRAL ::= N_IDCAPSULA N_OPERADORLOGICO PID 
            {
              String RESULT =null;
		int capaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int caparight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String capa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORLOGICO - "+idb); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_EXPRESIONCENTRAL ::= N_IDCAPSULA N_OPERADORLOGICO N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int capaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int caparight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String capa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String vb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORLOGICO - VALORESBOOLEANOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_EXPRESIONCENTRAL ::= N_IDCAPSULA N_OPERADORLOGICO N_EXPRESIONCAPSULA 
            {
              String RESULT =null;
		int capaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int caparight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String capa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int ecaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IDCAPSULA - OPERADORLOGICO - EXPRESIONCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO N_IDCAPSULA 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int capbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int capbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String capb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCENTRAL - OPERADORLOGICO - IDCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO PID 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCENTRAL - OPERADORLOGICO - "+ida); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String vb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCENTRAL - OPERADORLOGICO - VALORESBOOLEANOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO N_EXPRESIONCAPSULA 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int ecaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCENTRAL - OPERADORLOGICO - EXPRESIONCAPSULA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_EXPRESIONPADRE ::= N_EXPRESIONCOMPARA 
            {
              String RESULT =null;
		int ecoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eco = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCOMPARA"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONPADRE",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_EXPRESIONPADRE ::= N_EXPRESIONCENTRAL 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("EXPRESIONCENTRAL"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONPADRE",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_PROGRENUMERICO ::= N_NUMERICOS PDESDEHASTA N_NUMERICOS 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int daleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int daright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String da = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - "+da+" - NUMERICOS"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_PROGRENUMERICO",27, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_CADACASO ::= N_PROGRENUMERICO PDOSPUNTOS N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pn = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("PROGRENUMERICO - "+dp+" - BEGINENDBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_CADACASO",26, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_CADACASO ::= N_NUMERICOS PDOSPUNTOS N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("NUMERICOS - "+dp+" - BEGINENDBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_CADACASO",26, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_CADACASO ::= N_CADACASO N_PROGRENUMERICO PDOSPUNTOS N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pnleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pn = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("CADACASO - PROGRENUMERICO - "+dp+" - BEGINENDBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_CADACASO",26, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_CADACASO ::= N_CADACASO N_NUMERICOS PDOSPUNTOS N_BEGINENDBLOQUE 
            {
              String RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int dpleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int dpright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int bbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int bbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String bb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("CADACASO - NUMERICOS - "+dp+" - BEGINENDBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_CADACASO",26, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_SUBCASE ::= PCASE PID POF N_CADACASO PEND PPUNTOCOMA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ca+" - "+ida+" - "+po+" - CADACASO"+" - "+pe+" - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBCASE",25, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_SUBCASE ::= PCASE N_IDCAPSULA POF N_CADACASO PEND PPUNTOCOMA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int capleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int capright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String cap = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int poleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int poright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String cc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(ca+" - IDCAPSULA - "+po+" - CADACASO"+" - "+pe+" - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBCASE",25, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_SUBIF ::= PIF N_EXPRESIONPADRE PTHEN N_IMPRIMIR PELSE N_BLOQUE PPUNTOCOMA 
            {
              String RESULT =null;
		int pifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int pifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String pif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pthleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pthright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pth = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pif+" - EXPRESIONPADRE - "+pth+" - BLOQUE - "+pc+" - "+el+" - BLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBIF",5, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_SUBIF ::= PIF N_EXPRESIONPADRE PTHEN N_BLOQUE PPUNTOCOMA 
            {
              String RESULT =null;
		int pifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pthleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pthright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pth = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pif+" - EXPRESIONPADRE - "+pth+" - BLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBIF",5, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_SUBBLOQUE ::= N_IMPRIMIR 
            {
              String RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("IMPRIMIR"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_SUBBLOQUE ::= N_SUBCASE 
            {
              String RESULT =null;
		int scleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int scright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SUBCASE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_SUBBLOQUE ::= N_SUBWHILE 
            {
              String RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int whright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String wh = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SUBWHILE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_SUBBLOQUE ::= N_SUBFOR 
            {
              String RESULT =null;
		int sfrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sfrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sfr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SUBFOR"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_SUBBLOQUE ::= N_SUBIF 
            {
              String RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SUBIF"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_BLOQUE ::= N_SUBBLOQUE 
            {
              String RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("SUBBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BLOQUE",2, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_BLOQUE ::= N_BLOQUE N_SUBBLOQUE 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("BLOQUE - SUBBLOQUE"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BLOQUE",2, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_BEGINENDBLOQUE ::= PBEGIN N_BLOQUE PEND PPUNTOCOMA 
            {
              String RESULT =null;
		int pbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pb+" - BLOQUE - "+pe+" - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BEGINENDBLOQUE",3, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_INICIA ::= PPROGRAM PID PPUNTOCOMA N_VARDECLARACION PBEGIN N_BLOQUE PEND PPUNTO 
            {
              String RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)).right;
		String pp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-7)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int vdeleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int vderight = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String vde = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int puleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pp+" - "+pd+" - "+pc+" - VARDECLARACION - "+pb+" - BLOQUE - "+pe+" - "+pu); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_INICIA",1, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-7)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIA ::= PPROGRAM PID PPUNTOCOMA PBEGIN N_BLOQUE PEND PPUNTO 
            {
              String RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String pp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int puleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int puright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pu = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pp+" - "+pd+" - "+pc+" - "+pb+" - BLOQUE - "+pe+" - "+pu); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_INICIA",1, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S_INICIA ::= N_INICIA 
            {
              String RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("INICIAL"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("S_INICIA",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S_INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		RESULT = start_val;
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador$parser.done_parsing();
          return CUP$analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

