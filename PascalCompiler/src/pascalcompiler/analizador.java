
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 16 09:28:30 CST 2017
//----------------------------------------------------

package pascalcompiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 16 09:28:30 CST 2017
  */
public class analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public analizador() {super();}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\003\000\002\006\007\000\002\006\011\000" +
    "\002\007\003\000\002\007\003\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\013\005\000\002\013\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\014\003" +
    "\000\002\014\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\016\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\004\077\004\001\002\000\004\137\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\071\011\001\002\000" +
    "\004\100\012\001\002\000\006\025\017\120\020\001\002" +
    "\000\014\025\ufffd\027\ufffd\071\ufffd\101\ufffd\120\ufffd\001" +
    "\002\000\010\025\017\101\114\120\020\001\002\000\014" +
    "\025\ufffc\027\ufffc\071\ufffc\101\ufffc\120\ufffc\001\002\000" +
    "\014\025\ufffb\027\ufffb\071\ufffb\101\ufffb\120\ufffb\001\002" +
    "\000\020\067\040\074\032\075\026\137\025\140\037\142" +
    "\035\143\034\001\002\000\004\067\021\001\002\000\004" +
    "\143\022\001\002\000\004\070\023\001\002\000\004\071" +
    "\024\001\002\000\014\025\uffd6\027\uffd6\071\uffd6\101\uffd6" +
    "\120\uffd6\001\002\000\032\026\ufff1\034\ufff1\041\ufff1\051" +
    "\062\052\060\053\061\054\063\055\057\056\056\063\ufff1" +
    "\064\ufff1\070\ufff1\001\002\000\022\026\uffe1\034\uffe1\041" +
    "\uffe1\051\uffe1\052\uffe1\063\uffe1\064\uffe1\070\uffe1\001\002" +
    "\000\014\026\ufff8\034\047\041\045\063\050\064\046\001" +
    "\002\000\004\026\ufff7\001\002\000\016\026\ufff3\034\ufff3" +
    "\041\ufff3\063\ufff3\064\ufff3\070\ufff3\001\002\000\022\026" +
    "\uffe2\034\uffe2\041\uffe2\051\uffe2\052\uffe2\063\uffe2\064\uffe2" +
    "\070\uffe2\001\002\000\004\026\100\001\002\000\016\051" +
    "\062\052\060\053\061\054\063\055\057\056\056\001\002" +
    "\000\016\051\062\052\060\053\061\054\063\055\057\056" +
    "\056\001\002\000\022\026\ufff2\034\ufff2\041\ufff2\051\067" +
    "\052\066\063\ufff2\064\ufff2\070\ufff2\001\002\000\016\051" +
    "\062\052\060\053\061\054\063\055\057\056\056\001\002" +
    "\000\020\067\040\074\032\075\026\137\025\140\037\142" +
    "\035\143\034\001\002\000\014\034\047\041\045\063\050" +
    "\064\046\070\051\001\002\000\004\070\043\001\002\000" +
    "\016\026\uffef\034\uffef\041\uffef\063\uffef\064\uffef\070\uffef" +
    "\001\002\000\012\067\040\074\032\075\026\137\054\001" +
    "\002\000\012\067\uffd8\074\uffd8\075\uffd8\137\uffd8\001\002" +
    "\000\012\067\uffda\074\uffda\075\uffda\137\uffda\001\002\000" +
    "\012\067\uffd7\074\uffd7\075\uffd7\137\uffd7\001\002\000\012" +
    "\067\uffd9\074\uffd9\075\uffd9\137\uffd9\001\002\000\016\026" +
    "\ufff0\034\ufff0\041\ufff0\063\ufff0\064\ufff0\070\ufff0\001\002" +
    "\000\016\026\ufff6\034\ufff6\041\ufff6\063\ufff6\064\ufff6\070" +
    "\ufff6\001\002\000\016\026\ufff5\034\ufff5\041\ufff5\063\ufff5" +
    "\064\ufff5\070\ufff5\001\002\000\016\026\ufff4\034\ufff4\041" +
    "\ufff4\063\ufff4\064\ufff4\070\ufff4\001\002\000\006\137\065" +
    "\140\064\001\002\000\012\137\uffdb\140\uffdb\142\uffdb\143" +
    "\uffdb\001\002\000\012\137\uffdc\140\uffdc\142\uffdc\143\uffdc" +
    "\001\002\000\012\137\uffdf\140\uffdf\142\uffdf\143\uffdf\001" +
    "\002\000\012\137\uffde\140\uffde\142\uffde\143\uffde\001\002" +
    "\000\012\137\uffe0\140\uffe0\142\uffe0\143\uffe0\001\002\000" +
    "\012\137\uffdd\140\uffdd\142\uffdd\143\uffdd\001\002\000\006" +
    "\026\uffed\070\uffed\001\002\000\006\026\uffeb\070\uffeb\001" +
    "\002\000\006\074\032\075\026\001\002\000\006\074\032" +
    "\075\026\001\002\000\006\026\uffe3\070\uffe3\001\002\000" +
    "\006\026\uffe4\070\uffe4\001\002\000\006\137\074\142\073" +
    "\001\002\000\006\026\uffea\070\uffea\001\002\000\006\026" +
    "\uffe9\070\uffe9\001\002\000\006\137\076\143\077\001\002" +
    "\000\006\026\uffe6\070\uffe6\001\002\000\006\026\uffe7\070" +
    "\uffe7\001\002\000\006\025\017\120\020\001\002\000\012" +
    "\025\017\027\104\071\103\120\020\001\002\000\014\025" +
    "\ufffe\027\ufffe\071\ufffe\101\ufffe\120\ufffe\001\002\000\014" +
    "\025\ufffa\027\ufffa\071\ufffa\101\ufffa\120\ufffa\001\002\000" +
    "\006\025\017\120\020\001\002\000\010\025\017\071\106" +
    "\120\020\001\002\000\014\025\ufff9\027\ufff9\071\ufff9\101" +
    "\ufff9\120\ufff9\001\002\000\012\137\112\140\110\142\111" +
    "\143\113\001\002\000\006\026\uffec\070\uffec\001\002\000" +
    "\006\026\uffe8\070\uffe8\001\002\000\006\026\uffee\070\uffee" +
    "\001\002\000\006\026\uffe5\070\uffe5\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\112\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\013\005" +
    "\012\006\014\016\015\001\001\000\002\001\001\000\010" +
    "\005\101\006\014\016\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\032\010\026\011\027\013\030" +
    "\014\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\106\001\001\000\002\001\001\000\004\012\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\074\001\001\000\004\015" +
    "\071\001\001\000\002\001\001\000\004\015\054\001\001" +
    "\000\012\010\040\011\041\013\030\014\035\001\001\000" +
    "\004\012\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\051\014\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\070\001\001\000\004\014\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\100\005\012\006\014\016\015" +
    "\001\001\000\010\005\101\006\014\016\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\104\005\012" +
    "\006\014\016\015\001\001\000\010\005\101\006\014\016" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public node elPadre;
    public boolean errorSintaxis = false;
    public void syntax_error(Symbol s) {
        errorSintaxis = true;
        System.out.print(" Error sintáctico en la línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido. " );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errorSintaxis = false;
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido. ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$analizador$actions {
  private final analizador parser;

  /** Constructor */
  CUP$analizador$actions(analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$analizador$do_action(
    int                        CUP$analizador$act_num,
    java_cup.runtime.lr_parser CUP$analizador$parser,
    java.util.Stack            CUP$analizador$stack,
    int                        CUP$analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador$result;

      /* select the action based on the action number */
      switch (CUP$analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // N_IMPRIMIR ::= PWRITELN PPARA PTEXTO PPARC PPUNTOCOMA 
            {
              String RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String wr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(wr+" - "+pa+" - "+pt+" - "+pr+" - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_IMPRIMIR",12, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // N_OPERADORLOGICO ::= PORELSE 
            {
              String RESULT =null;
		int pelleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pelright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pel = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // N_OPERADORLOGICO ::= PANDTHEN 
            {
              String RESULT =null;
		int patleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int patright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pat = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // N_OPERADORLOGICO ::= POR 
            {
              String RESULT =null;
		int poleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int poright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String po = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // N_OPERADORLOGICO ::= PAND 
            {
              String RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_OPERADORLOGICO",8, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // N_SIMBOLOCOMPARE ::= PMAYORIGUAL 
            {
              String RESULT =null;
		int maxeleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int maxeright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String maxe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // N_SIMBOLOCOMPARE ::= PMENORIGUAL 
            {
              String RESULT =null;
		int mineleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int mineright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String mine = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // N_SIMBOLOCOMPARE ::= PMAYOR 
            {
              String RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String max = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // N_SIMBOLOCOMPARE ::= PMENOR 
            {
              String RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // N_SIMBOLOCOMPARE ::= PCOMPARE 
            {
              String RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // N_SIMBOLOCOMPARE ::= PDISTINTO 
            {
              String RESULT =null;
		int disleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int disright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SIMBOLOCOMPARE",11, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // N_VALORESBOOLEANOS ::= PFALSE 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VALORESBOOLEANOS",10, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // N_VALORESBOOLEANOS ::= PTRUE 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_VALORESBOOLEANOS",10, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // N_EXPRESIONCOMPARA ::= N_VALORESBOOLEANOS PDISTINTO N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int disright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String dis = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // N_EXPRESIONCOMPARA ::= N_VALORESBOOLEANOS PCOMPARE N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String eq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // N_EXPRESIONCOMPARA ::= PID N_SIMBOLOCOMPARE PTEXTO 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int txbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int txbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String txb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // N_EXPRESIONCOMPARA ::= PTEXTO N_SIMBOLOCOMPARE PID 
            {
              String RESULT =null;
		int txaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int txaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String txa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // N_EXPRESIONCOMPARA ::= PTEXTO N_SIMBOLOCOMPARE PTEXTO 
            {
              String RESULT =null;
		int txaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int txaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String txa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int txbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int txbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String txb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // N_EXPRESIONCOMPARA ::= PID N_SIMBOLOCOMPARE PFLOTANTE 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int flbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int flbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String flb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // N_EXPRESIONCOMPARA ::= PFLOTANTE N_SIMBOLOCOMPARE PID 
            {
              String RESULT =null;
		int flaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int flaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String fla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // N_EXPRESIONCOMPARA ::= PFLOTANTE N_SIMBOLOCOMPARE PFLOTANTE 
            {
              String RESULT =null;
		int flaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int flaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String fla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int flbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int flbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String flb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // N_EXPRESIONCOMPARA ::= PNUMERO N_SIMBOLOCOMPARE PID 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // N_EXPRESIONCOMPARA ::= PID N_SIMBOLOCOMPARE PNUMERO 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // N_EXPRESIONCOMPARA ::= PNUMERO N_SIMBOLOCOMPARE PNUMERO 
            {
              String RESULT =null;
		int numaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int numaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String numa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int numbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int numbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String numb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // N_EXPRESIONCOMPARA ::= PID N_SIMBOLOCOMPARE PID 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int compright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String comp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String idb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCOMPARA",7, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // N_EXPRESIONCAPSULA ::= PPARA N_EXPRESIONCOMPARA PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int ecoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int ecoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String eco = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCAPSULA",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // N_EXPRESIONCAPSULA ::= PPARA N_EXPRESIONCENTRAL PPARC 
            {
              String RESULT =null;
		int pderleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pderright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pder = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pizqleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pizqright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pizq = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCAPSULA",9, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // N_EXPRESIONCENTRAL ::= PID 
            {
              String RESULT =null;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // N_EXPRESIONCENTRAL ::= N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int vbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String vb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCAPSULA 
            {
              String RESULT =null;
		int ecaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO PID 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int idaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int idaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ida = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO N_VALORESBOOLEANOS 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int vbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int vbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String vb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // N_EXPRESIONCENTRAL ::= N_EXPRESIONCENTRAL N_OPERADORLOGICO N_EXPRESIONCAPSULA 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int ecaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eca = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONCENTRAL",6, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // N_EXPRESIONPADRE ::= N_EXPRESIONCOMPARA 
            {
              String RESULT =null;
		int ecoleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int ecoright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String eco = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONPADRE",5, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // N_EXPRESIONPADRE ::= N_EXPRESIONCENTRAL 
            {
              String RESULT =null;
		int eceleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int eceright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ece = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_EXPRESIONPADRE",5, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // N_SUBIF ::= PIF N_EXPRESIONPADRE PTHEN N_BLOQUE PELSE N_BLOQUE PPUNTOCOMA 
            {
              String RESULT =null;
		int pifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).left;
		int pifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)).right;
		String pif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-6)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pthleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pthright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pth = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int blaleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int blaright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String bla = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String blb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBIF",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-6)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // N_SUBIF ::= PIF N_EXPRESIONPADRE PTHEN N_BLOQUE PPUNTOCOMA 
            {
              String RESULT =null;
		int pifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int epleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int epright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String ep = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pthleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pthright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pth = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBIF",4, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // N_SUBBLOQUE ::= N_IMPRIMIR 
            {
              String RESULT =null;
		int impleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int impright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String imp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",3, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // N_SUBBLOQUE ::= N_SUBIF 
            {
              String RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sif = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_SUBBLOQUE",3, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // N_BLOQUE ::= N_SUBBLOQUE 
            {
              String RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BLOQUE",2, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_BLOQUE ::= N_BLOQUE N_SUBBLOQUE 
            {
              String RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String sb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;

              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BLOQUE",2, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIA ::= PPROGRAM PID PPUNTOCOMA PBEGIN N_BLOQUE PEND 
            {
              String RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String pp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pp+" - "+pd+" - "+pc+" - "+pb+" - BLOQUE - "+pe); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_INICIA",1, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S_INICIA ::= N_INICIA 
            {
              String RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("INICIAL"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("S_INICIA",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S_INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		RESULT = start_val;
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador$parser.done_parsing();
          return CUP$analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

