
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 12 20:05:44 CST 2017
//----------------------------------------------------

package pascalcompiler;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 12 20:05:44 CST 2017
  */
public class analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public analizador() {super();}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\004\000\002\002\004\000\002\003\003\000\002\002" +
    "\010\000\002\004\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\004\077\004\001\002\000\004\137\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\071\011\001\002\000" +
    "\004\100\012\001\002\000\004\120\014\001\002\000\004" +
    "\101\021\001\002\000\004\067\015\001\002\000\004\143" +
    "\016\001\002\000\004\070\017\001\002\000\004\071\020" +
    "\001\002\000\004\101\ufffe\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public node elPadre;
    public boolean errorSintaxis = false;
    public void syntax_error(Symbol s) {
        errorSintaxis = true;
        System.out.print(" Error sintáctico en la línea " + (s.right+1) +" Columna "+s.left+ ". Identificador "
        +s.value + " no reconocido. " );
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        errorSintaxis = false;
        System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " +
        s.value + " no reconocido. ");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$analizador$actions {
  private final analizador parser;

  /** Constructor */
  CUP$analizador$actions(analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$analizador$do_action(
    int                        CUP$analizador$act_num,
    java_cup.runtime.lr_parser CUP$analizador$parser,
    java.util.Stack            CUP$analizador$stack,
    int                        CUP$analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analizador$result;

      /* select the action based on the action number */
      switch (CUP$analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // N_BLOQUE ::= PWRITELN PPARA PTEXTO PPARC PPUNTOCOMA 
            {
              String RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String wr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pa = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pt = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String pr = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(wr+" - "+pa+" - "+pt+" - "+pr+" - "+pc); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_BLOQUE",2, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // N_INICIA ::= PPROGRAM PID PPUNTOCOMA PBEGIN N_BLOQUE PEND 
            {
              String RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)).right;
		String pp = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-5)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-4)).right;
		String pd = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-4)).value;
		int pcleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).left;
		int pcright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-3)).right;
		String pc = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-3)).value;
		int pbleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).left;
		int pbright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-2)).right;
		String pb = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int blright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String bl = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String pe = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println(pp+" - "+pd+" - "+pc+" - "+pb+" - BLOQUE - "+pe); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("N_INICIA",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-5)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S_INICIA ::= N_INICIA 
            {
              String RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.peek()).value;
		 System.out.println("INICIAL"); 
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("S_INICIA",1, ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          return CUP$analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S_INICIA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$analizador$stack.elementAt(CUP$analizador$top-1)).value;
		RESULT = start_val;
              CUP$analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analizador$stack.elementAt(CUP$analizador$top-1)), ((java_cup.runtime.Symbol)CUP$analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analizador$parser.done_parsing();
          return CUP$analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

